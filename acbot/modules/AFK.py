#                         ¬© Copyright 2022                               
#                                                                        
#                https://t.me/Den4ikSuperOstryyPer4ik                    
#                              and                                       
#                      https://t.me/ToXicUse                             
#                                                                         
#                 üîí Licensed under the GNU AGPLv3                       
#             https://www.gnu.org/licenses/agpl-3.0.html                 
#                                                                                                                 
# scope: inline

from .. import loader, utils

import logging
import datetime
import time

from telethon import types

from ..inline.types import InlineCall
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import UpdateProfileRequest

logger = logging.getLogger(__name__)


@loader.tds
class TxAFKMod(loader.Module):
	"""–ê—Ñ–∫ –º–æ–¥—É–ª—å –æ—Ç AstroModules —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –±–∏–æ –∏ –∏–º–µ–Ω–∏"""

	async def client_ready(self, client, db):
		self._db = db
		self._me = await client.get_me()

	strings = {
		"name": "myAFK",

		"lname": "| afk.",
		"lname0": " ",

		"bt_off_afk": "‚ö†Ô∏è –ê–§–ö –≤–∏–º–∫–Ω–µ–Ω–æ",
		"bt_on_afk": "üí§ –ê–§–ö –≤–≤—ñ–º–∫–Ω–µ–Ω–æ",

		"_cfg_cst_btn": "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç, —è–∫–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —Ä–∞–∑–æ–º –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º. (–©–æ–± –≤–∑–∞–≥–∞–ª—ñ –ø—Ä–∏–±—Ä–∞—Ç–∏, –Ω–∞–ø–∏—à—ñ—Ç—å None)",
		"standart_bio_text": "–ö–∞—Å—Ç–æ–º–Ω–∏–π –æ–ø–∏—Å –ø—Ä–æ—Ñ—ñ–ª—é",
		"feedback_bot__text": "–Æ–∑–µ—Ä –≤–∞—à–æ–≥–æ —Ñ—ñ–¥–±–µ–∫ –±–æ—Ç–∞ (—è–∫—â–æ —î)",
		"button__text": "–î–æ–¥–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ê–§–ö?",
		"custom_text__afk_text": "–ö–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç –∞—Ñ–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π {time} –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —á–∞—Å—É –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è —É –º–µ—Ä–µ–∂—ñ",
	}

	def __init__(self):
		self.config = loader.ModuleConfig(
			loader.ConfigValue(
				"feedback_bot",
				"None",
				doc=lambda: self.strings("feedback_bot__text"),
			),
			loader.ConfigValue(
				"custom_text__afk",
				"None",
				doc=lambda: self.strings("custom_text__afk_text"),
			),
			loader.ConfigValue(
				"standart_bio",
				"None",
				doc=lambda: self.strings("standart_bio_text"),
			),
			loader.ConfigValue(
				"custom_button",
				[
					"AuthorChe`s‚úçÔ∏è",
					"https://t.me/AuthorChe",
				],
				lambda: self.strings("_cfg_cst_btn"),
				validator=loader.validators.Union(
					loader.validators.Series(fixed_len=2),
					loader.validators.NoneType(),
				),
			),
			loader.ConfigValue(
				"ignore_chats",
				[],
				lambda: "–ß–∞—Ç–∏, –≤ —è–∫–∏—Ö –ø—Ä–∏ –∑–≥–∞–¥—Ü—ñ AF–ö –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏–º–µ",
				validator=loader.validators.Series(
                    validator=loader.validators.Union(
                        loader.validators.TelegramID(),
                        loader.validators.RegExp("[0-9]"),
                    ),
                ),
			),
			loader.ConfigValue(
				"button",
				True,
				doc=lambda: self.strings("button__text"),
				validator=loader.validators.Boolean(),
			)

		)


	async def afkconfigcmd(self, message):
		"""- –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥ –º–æ–¥—É–ª—è"""
		await self.allmodules.commands["config"](
					await utils.answer(message, f"{self.get_prefix()}config myAFK")
				)

	async def afkcmd(self, message):
		"""- AFK —Ä–µ–∂–∏–º"""
		try:
			user_id = (
				(
					(
						await self._client.get_entity(
							args if not args.isdigit() else int(args)
						)
					).id
				)
				if args
				else reply.sender_id
			)
		except Exception:
			user_id = self._tg_id

		user = await self._client(GetFullUserRequest(user_id))
		
		self._db.set(__name__, "afk", True)
		self._db.set(__name__, "gone", time.time())
		self._db.set(__name__, "ratelimit", [])
		a_afk_bio_nofb = "–í –∞—Ñ–∫."
		lastname = self.strings("lname")
		if self.config['feedback_bot'] == None:
			await message.client(UpdateProfileRequest(about=a_afk_bio_nofb, last_name=lastname))
		else:
			a_afk_bio = '–í –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —è –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ. –ó–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —á–µ—Ä–µ–∑ '
			feedback = self.config['feedback_bot']
			aaa = a_afk_bio + feedback
			await message.client(UpdateProfileRequest(about=aaa))
		await self.allmodules.log("goafk")
		await utils.answer(message, '<emoji document_id=5215519585150706301>üëç</emoji> <b>–ê–§–ö —Ä–µ–∂–∏–º –≤–≤—ñ–º–µ–Ω–µ–Ω–æ!</b>')
		await message.client(UpdateProfileRequest(last_name=lastname))

	async def unafkcmd(self, message):
		"""- –≤–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É AFK"""
		msg = await utils.answer(message, '<emoji document_id=5213107179329953547>‚è∞</emoji> <b>–í–∏–º–∏–∫–∞—é —Ä–µ–∂–∏–º –ê–§–ö...</b>')
		sbio = self.config['standart_bio']
		lastname0 = self.strings('lname0')
		self._db.set(__name__, "afk", False)
		self._db.set(__name__, "gone", None)
		self._db.set(__name__, "ratelimit", [])
		await self.allmodules.log("unafk")
		if sbio == None:
			await message.client(UpdateProfileRequest(about='', last_name=lastname0))
		else:
			await message.client(UpdateProfileRequest(about=sbio, last_name=lastname0))
		time.sleep(1)
		await utils.answer(msg, '<emoji document_id=5220108512893344933>üÜò</emoji> <b>–†–µ–∂–∏–º AFK –≤–∏–º–∫–Ω–µ–Ω–æ!</b>')


	def _afk_custom_text(self) -> str:
		now = datetime.datetime.now().replace(microsecond=0)
		gone = datetime.datetime.fromtimestamp(
			self._db.get(__name__, "gone")
		).replace(microsecond=0)

		time = now - gone

		return (
			"<b> </b>\n"
			+ self.config["custom_text__afk"].format(
				time=time,
			)
		)


	async def watcher(self, message):
		if not isinstance(message, types.Message):
			return
		if utils.get_chat_id(message) in self.config['ignore_chats']: 
			return
		if message.mentioned or getattr(message.to_id, "user_id", None) == self._me.id:
			afk_state = self.get_afk()
			if not afk_state:
				return
			logger.debug("tagged!")
			ratelimit = self._db.get(__name__, "ratelimit", [])
			if utils.get_chat_id(message) in ratelimit:
				return
			else:
				self._db.setdefault(__name__, {}).setdefault("ratelimit", []).append(
					utils.get_chat_id(message)
				)
				self._db.save()
			user = await utils.get_user(message)
			if user.is_self or user.bot or user.verified:
				logger.debug("User is self, bot or verified.")
				return
			if self.get_afk() is False:
				return
			now = datetime.datetime.now().replace(microsecond=0)
			gone = datetime.datetime.fromtimestamp(
				self._db.get(__name__, "gone")
			).replace(microsecond=0)
			time = now - gone
			if self.config['custom_button'] == None:
				if self.config["button"] == False:
					if self.config["custom_text__afk"] == None:
						await self.inline.form(message=message, text=f"<b>üîÖ –Ø –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–±—É–≤–∞—é –≤ offline (–Ω–µ –≤ –º–µ—Ä–µ–∂—ñ).\n–í—ñ–¥–ø–æ–≤—ñ–º –ø—ñ–∑–Ω—ñ—à–µ</b>\n\n–í–æ—Å—Ç–∞–Ω–Ω—î –±—É–≤ —É –º–µ—Ä–µ–∂—ñ <code>{time}</code> —Ç–æ–º—É.\n\n<i>–ü–æ–∫–∏ —á–µ–∫–∞—î—Ç–µ, —Ä–∞–¥–∂—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—É —Ç–≤–æ—Ä—ñ–≤ –≤:</i>")
					else:
						await self.inline.form(message=message, text=self._afk_custom_text())
				
				elif self.config['button'] == True:
					if self.config["custom_text__afk"] == None:
						await self.inline.form(
							message=message, 
							text=f"<b>üîÖ –Ø –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–±—É–≤–∞—é –≤ offline (–Ω–µ –≤ –º–µ—Ä–µ–∂—ñ).\n–í—ñ–¥–ø–æ–≤—ñ–º –ø—ñ–∑–Ω—ñ—à–µ</b>\n\n–í–æ—Å—Ç–∞–Ω–Ω—î –±—É–≤ —É –º–µ—Ä–µ–∂—ñ <code>{time}</code> —Ç–æ–º—É.\n\n<i>–ü–æ–∫–∏ —á–µ–∫–∞—î—Ç–µ, —Ä–∞–¥–∂—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—É —Ç–≤–æ—Ä—ñ–≤ –≤:</i>", 
							reply_markup=[
								[
									{
										"text": "üö´ –í–∏–π—Ç–∏ –∑ –∞—Ñ–∫ üö´", 
										"callback": self.button_cancel,
									}
								]
							]
						)

					else:
						await self.inline.form(
							message=message, 
							text=self._afk_custom_text(), 
							reply_markup=[
								[
									{
										"text": "üö´ –í–∏–π—Ç–∏ –∑ –∞—Ñ–∫ üö´", 
										"callback": self.button_cancel,
									}
								]
							]
						)
			else:
				if self.config["button"] == False:
					if self.config["custom_text__afk"] == None:
						await self.inline.form(message=message, text=f"<b>üîÖ –Ø –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–±—É–≤–∞—é –≤ offline (–Ω–µ –≤ –º–µ—Ä–µ–∂—ñ).\n–í—ñ–¥–ø–æ–≤—ñ–º –ø—ñ–∑–Ω—ñ—à–µ</b>\n\n–í–æ—Å—Ç–∞–Ω–Ω—î –±—É–≤ —É –º–µ—Ä–µ–∂—ñ <code>{time}</code> —Ç–æ–º—É.\n\n<i>–ü–æ–∫–∏ —á–µ–∫–∞—î—Ç–µ, —Ä–∞–¥–∂—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—É —Ç–≤–æ—Ä—ñ–≤ –≤:</i>", reply_markup=[{"text": self.config['custom_button'][0], "url": self.config['custom_button'][1]}])
					else:
						await self.inline.form(message=message, text=self._afk_custom_text(), reply_markup=[{"text": self.config['custom_button'][0], "url": self.config['custom_button'][1]}])
				
				elif self.config['button'] == True:
					if self.config["custom_text__afk"] == None:
						await self.inline.form(
							message=message, 
							text=f"<b>üîÖ –Ø –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–±—É–≤–∞—é –≤ offline (–Ω–µ –≤ –º–µ—Ä–µ–∂—ñ).\n–í—ñ–¥–ø–æ–≤—ñ–º –ø—ñ–∑–Ω—ñ—à–µ</b>\n\n–í–æ—Å—Ç–∞–Ω–Ω—î –±—É–≤ —É –º–µ—Ä–µ–∂—ñ <code>{time}</code> —Ç–æ–º—É.\n\n<i>–ü–æ–∫–∏ —á–µ–∫–∞—î—Ç–µ, —Ä–∞–¥–∂—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—É —Ç–≤–æ—Ä—ñ–≤ –≤:</i>", 
							reply_markup=[
								[
									{
										"text": self.config['custom_button'][0],
										"url": self.config['custom_button'][1],
									}
								],
								[
									{
										"text": "üö´ –í–∏–π—Ç–∏ –∑ –∞—Ñ–∫ üö´", 
										"callback": self.button_cancel,
									}
								]
							]
						)

					else:
						await self.inline.form(
							message=message, 
							text=self._afk_custom_text(), 
							reply_markup=[
								[
									{
										"text": self.config['custom_button'][0],
										"url": self.config['custom_button'][1],
									}
								],
								[
									{
										"text": "üö´ –í–∏–π—Ç–∏ –∑ –∞—Ñ–∫ üö´", 
										"callback": self.button_cancel,
									}
								]
							]
						)

	async def button_cancel(self, call: InlineCall):
		self._db.set(__name__, "afk", False)
		self._db.set(__name__, "gone", None)
		self._db.set(__name__, "ratelimit", [])
		await self.allmodules.log("unafk")
		if self.config['standart_bio'] == None:
			lastname = self.strings("lname0")
			about = self.strings("lname0")
			await self._client(UpdateProfileRequest(about=about, last_name=lastname))
		else:
			aboutt = self.config['standart_bio']
			lastname = self.strings("lname0")
			await self._client(UpdateProfileRequest(about=aboutt, last_name=lastname))
		await call.edit(
		self.strings["bt_off_afk"],
		reply_markup=[
			{
				"text": "üî∞ –í–≤—ñ–π—Ç–∏ –≤ –∞—Ñ–∫ üî∞",
				"callback": self.button_cancel_on,
			}
		]
	)

	async def button_cancel_on(self, call: InlineCall):
		self._db.set(__name__, "afk", True)
		self._db.set(__name__, "gone", time.time())
		self._db.set(__name__, "ratelimit", [])
		a_afk_bio_nofb = "–í –∞—Ñ–∫."
		lastname = self.strings("lname")
		if self.config['feedback_bot'] == None:
			await self._client(UpdateProfileRequest(about=a_afk_bio_nofb, last_name=lastname))
		else:
			a_afk_bio = '–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤ –ê–§–ö. –ó–≤`—è–∑–æ–∫ —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ '
			feedback = self.config['feedback_bot']
			aaa = a_afk_bio + feedback
			await self._client(UpdateProfileRequest(about=aaa))
		await call.edit(
		self.strings["bt_on_afk"],
		reply_markup=[
			{
				"text": "üö´ –í–∏–π—Ç–∏ –∑ –∞—Ñ–∫ üö´",
				"callback": self.button_cancel,
			}
		]
	)

	def get_afk(self):
		return self._db.get(__name__, "afk", False)
