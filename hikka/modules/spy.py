# ¬©Ô∏è Dan G. && AuthorChe
# üåê 
# You can redistribute it and/or modify it under the terms of the GNU AGPLv3
# üîë https://www.gnu.org/licenses/agpl-3.0.html

__version__ = (1, 0, 28)

import contextlib
import io
import logging
import time
import typing

from telethon.tl.types import (
    Message,
    UpdateDeleteChannelMessages,
    UpdateDeleteMessages,
    UpdateEditChannelMessage,
    UpdateEditMessage,
    DocumentAttributeFilename,
    PeerChat,
)
from telethon.utils import get_display_name

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class NekoSpy(loader.Module):
    """Sends you deleted and / or edited messages from selected users"""

    rei = "<emoji document_id=5409143295039252230>üë©‚Äçüé§</emoji>"
    groups = "<emoji document_id=6037355667365300960>üë•</emoji>"
    pm = "<emoji document_id=6048540195995782913>üë§</emoji>"

    strings = {
        "name": "NekoSpy",
        "state": f"{rei} <b>Spy mode is now {{}}</b>",
        "spybl": f"{rei} <b>Current chat added to blacklist for spying</b>",
        "spybl_removed": f"{rei} <b>Current chat removed from blacklist for spying</b>",
        "spybl_clear": f"{rei} <b>Ignore list for spying cleared</b>",
        "spywl": f"{rei} <b>Current chat added to whitelist for spying</b>",
        "spywl_removed": f"{rei} <b>Current chat removed from whitelist for spying</b>",
        "spywl_clear": f"{rei} <b>Include list for spying cleared</b>",
        "whitelist": f"\n{rei} <b>Tracking only messages from:</b>\n{{}}",
        "always_track": f"\n{rei} <b>Always tracking messages from:</b>\n{{}}",
        "blacklist": f"\n{rei} <b>Ignoring messages from:</b>\n{{}}",
        "chat": f"{groups} <b>Tracking messages in groups</b>\n",
        "pm": f"{pm} <b>Tracking messages in personal messages</b>\n",
        "mode_off": f"{pm} <b>Not tracking messages </b><code>{{}}spymode</code>\n",
        "deleted_pm": (
            'üóë <b><a href="{}">{}</a> deleted <a href="{message_url}">message</a> in'
            " pm. Content:</b>\n{}"
        ),
        "deleted_chat": (
            'üóë <b><a href="{message_url}">Message</a> in chat <a href="{}">{}</a> by <a'
            ' href="{}">{}</a> has been deleted. Content:</b>\n{}'
        ),
        "edited_pm": (
            'üîè <b><a href="{}">{}</a> edited <a href="{message_url}">message</a> in pm.'
            " Old content:</b>\n{}"
        ),
        "edited_chat": (
            'üîè <b><a href="{message_url}">Message</a> in chat <a href="{}">{}</a> by <a'
            ' href="{}">{}</a> has been edited. Old content:</b>\n{}'
        ),
        "on": "on",
        "off": "off",
        "cfg_enable_pm": "Enable spy mode in Personal messages",
        "cfg_enable_groups": "Enable spy mode in Groups",
        "cfg_whitelist": "List of chats to include messages from",
        "cfg_blacklist": "List of chats to exclude messages from",
        "cfg_always_track": (
            "List of chats to always track messages from, no matter what"
        ),
        "cfg_log_edits": "Log information about messages being edited",
        "cfg_ignore_inline": "Ignore inline messages (sent using @via bots)",
        "cfg_fw_protect": "Interval of messages sending to prevent floodwait",
        "sd_media": (
            "üî• <b><a href='tg://user?id={}'>{}</a> sent you a self-destructing"
            " media</b>"
        ),
        "save_sd": (
            "<emoji document_id=5420315771991497307>üî•</emoji> <b>Saving"
            " self-destructing media</b>\n"
        ),
        "cfg_save_sd": "Save self-destructing media",
    }

    strings_ua = {
        "on": "–≤–≤—ñ–º–∫–Ω–µ–Ω–æ",
        "off": "–≤–∏–º–∫–Ω–µ–Ω–æ",
        "state": f"{rei} <b>–†–µ–∂–∏–º —Å—Ç–µ–∂–∫–∏ —Ç–µ–ø–µ—Ä {{}}</b>",
        "spybl": f"{rei} <b>–¶–µ–π —á–∞—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–ª—è —Å—Ç–µ–∂–∫–∏</b>",
        "spybl_removed": (
            f"{rei} <b>–¶–µ–π —á–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å—Ç–µ–∂–∫–∏</b>"
        ),
        "spybl_clear": f"{rei} <b>–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ç–µ–∂–∫–∏ –æ—á–∏—â–µ–Ω–æ</b>",
        "spywl": f"{rei} <b>–¶–µ–π —á–∞—Ç –¥–æ–¥–∞–Ω–æ –≤ –ë—ñ–ª–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ç–µ–∂–∫–∏</b>",
        "spywl_removed": (
            f"{rei} <b>–¶–µ–π —á–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±—ñ–ª–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–ª—è —Å—Ç–µ–∂–∫–∏</b>"
        ),
        "spywl_clear": f"{rei} <b>–ë—ñ–ª–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ç–µ–∂–∫–∏ –æ—á–µ—â–µ–Ω–æ</b>",
        "whitelist": (
            f"\n{rei} <b>–°—Ç–µ–∂—É —Ç—ñ–ª—å–∫–∏"
            " –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ / –≥—Ä—É–ø:</b>\n{}"
        ),
        "always_track": (
            f"\n{rei} <b>–ó–∞–≤–∂–¥–∏ —Å—Ç–µ–∂—É –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ /"
            " –≥—Ä—É–ø:</b>\n{}"
        ),
        "blacklist": (
            f"\n{rei} <b>–Ü–≥–Ω–æ—Ä—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ / –≥—Ä—É–ø:</b>\n{{}}"
        ),
        "chat": f"{groups} <b>–°—Ç–µ–∂—É –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤ –≥—Ä—É–ø–∞—Ö</b>\n",
        "pm": f"{pm} <b>–°—Ç–µ–∂—É –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö</b>\n",
        "deleted_pm": (
            'üóë <b><a href="{}">{}</a> –≤–∏–¥–∞–ª–∏–≤(-–ª–∞) <a href="{message_url}">–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</a> –≤'
            " –æ—Å–æ–±–∏—Å—Ç–∏—Ö. –í–º—ñ—Å—Ç:</b>\n{}"
        ),
        "deleted_chat": (
            'üóë <b><a href="{message_url}">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</a> –≤ —á–∞—Ç—ñ <a href="{}">{}</a> –≤—ñ–¥'
            ' <a href="{}">{}</a> –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –í–º—ñ—Å—Ç:</b>\n{}'
        ),
        "edited_pm": (
            'üîè <b><a href="{}">{}</a> –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞–≤ <a'
            ' href="{message_url}">–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</a> –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö. –°—Ç–∞—Ä–∏–π –≤–º—ñ—Å—Ç:</b>\n{}'
        ),
        "edited_chat": (
            'üîè <b><a href="{message_url}">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</a> –≤ —á–∞—Ç—ñ <a href="{}">{}</a> –≤—ñ–¥'
            ' <a href="{}">{}</a> –±—É–ª–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞–Ω–æ. –°—Ç–∞—Ä–∏–π –≤–º—ñ—Å—Ç:</b>\n{}'
        ),
        "mode_off": f"{pm} <b>–ù–µ –≤—ñ–¥—Å—Ç–µ–∂—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è </b><code>{{}}spymode</code>\n",
        "cfg_enable_pm": "–í–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º —à–ø–∏–≥—É–Ω–∞ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö",
        "cfg_enable_groups": "–í–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º —à–ø–∏–≥—É–Ω–∞ –≤ –≥—Ä—É–ø–∞—Ö",
        "cfg_whitelist": "–°–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤, –≤—ñ–¥ —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
        "cfg_blacklist": "–°–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤, –≤—ñ–¥ —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
        "cfg_always_track": (
            "–°–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤, –≤—ñ–¥ —è–∫–∏—Ö –∑–∞–≤–∂–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,"
            " –Ω–µ –¥–∏–≤–ª—è—á–∏—Å—å –Ω—ñ –Ω–∞ —â–æ"
        ),
        "cfg_log_edits": "–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
        "cfg_ignore_inline": "–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º—É",
        "cfg_fw_protect": "–ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Ñ–ª—É–¥–≤–µ–π—Ç—ñ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—ñ",
        "_cls_doc": (
            "–ó–±–µ—Ä—ñ–≥–∞—î –≤–∏–¥–∞–ª–µ–Ω—ñ —ñ/–∞–±–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –≤–∏—é—Ä–∞–Ω–∏—Ö"
            " –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
        ),
        "sd_media": (
            "üî• <b><a href='tg://user?id={}'>{}</a> –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ –≤–∞–º —Å–∞–º–æ–∑–Ω–∏—â—é—é—á–µ"
            " –º–µ–¥—ñ–∞</b>"
        ),
        "save_sd": (
            "<emoji document_id=5420315771991497307>üî•</emoji> <b>–ó–±–µ—Ä—ñ–≥–∞—é"
            " —Å–∞–º–æ–∑–Ω–∏—â—é—é—á–µ –º–µ–¥—ñ–∞</b>\n"
        ),
        "cfg_save_sd": "–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–∞–º–æ–∑–Ω–∏—â—é—é—á—ñ –º–µ–¥—ñ–∞",
    }

    strings_it = {
        "on": "attivato",
        "off": "disattivato",
        "state": f"{rei} <b>Modalit√† di tracciamento ora {{}}</b>",
        "spybl": (
            f"{rei} <b>Il gruppo corrente √® stato aggiunto alla lista nera di"
            " tracciamento</b>"
        ),
        "spybl_removed": (
            f"{rei} <b>Il gruppo corrente √® stato rimosso dalla lista nera di"
            " tracciamento</b>"
        ),
        "spybl_clear": f"{rei} <b>Lista nera di tracciamento ripulita</b>",
        "spywl": (
            f"{rei} <b>Il gruppo corrente √® stato aggiunto alla lista bianca di"
            " tracciamento</b>"
        ),
        "spywl_removed": (
            f"{rei} <b>Il gruppo corrente √® stato rimosso dalla lista bianca di"
            " tracciamento</b>"
        ),
        "spywl_clear": f"{rei} <b>Lista bianca di tracciamento ripulita</b>",
        "whitelist": (
            f"\n{rei} <b>Sto tracciando solo messaggi da utenti / gruppi:</b>\n{{}}"
        ),
        "always_track": (
            f"\n{rei} <b>Sto tracciando sempre messaggi da utenti / gruppi:</b>\n{{}}"
        ),
        "blacklist": f"\n{rei} <b>Ignoro messaggi da utenti / gruppi:</b>\n{{}}",
        "chat": f"{groups} <b>Sto tracciando i messaggi nei gruppi</b>\n",
        "pm": f"{pm} <b>Sto tracciando i messaggi nei messaggi privati</b>\n",
        "deleted_pm": (
            'üóë <b><a href="{}">{}</a> ha cancellato <a href="{message_url}">il'
            " messaggio</a> in privato. Contenuto:</b>\n{}"
        ),
        "deleted_pm": (
            'üóë <b><a href="{}">{}</a> ha eliminato <a'
            ' href="{message_url}">un messaggio</a> in privato. Contenuto:</b>\n{}'
        ),
        "deleted_chat": (
            'üóë <b><a href="{message_url}">Un messaggio</a> nel gruppo <a'
            ' href="{}">{}</a> da <a href="{}">{}</a> √® stato eliminato.'
            " Contenuto:</b>\n{}"
        ),
        "edited_pm": (
            'üîè <b><a href="{}">{}</a> ha modificato <a href="{message_url}">un'
            " messaggio</a> in privato. Vecchio contenuto:</b>\n{}"
        ),
        "edited_chat": (
            'üîè <b><a href="{message_url}">Un messaggio</a> nel gruppo <a'
            ' href="{}">{}</a> da <a href="{}">{}</a> √® stato modificato. Vecchio'
            " contenuto:</b>\n{}"
        ),
        "mode_off": (
            f"{pm} <b>Non sto tenendo traccia dei messaggi"
            " </b><code>{}spymode</code>\n"
        ),
        "cfg_enable_pm": "Attiva modalit√† spia nei messaggi privati",
        "cfg_enable_groups": "Attiva modalit√† spia nei gruppi",
        "cfg_whitelist": "Lista dei gruppi da cui tenere traccia dei messaggi",
        "cfg_blacklist": "Lista dei gruppi da cui ignorare i messaggi",
        "cfg_always_track": (
            "Lista dei gruppi da cui tenere traccia dei messaggi,"
            " non importa quello che succede"
        ),
        "cfg_log_edits": "Salva i messaggi modificati",
        "cfg_ignore_inline": "Ignora i messaggi in modalit√† inline",
        "cfg_fw_protect": "Protezione contro floodwate ai messaggi inoltrati",
        "_cls_doc": "Salva i messaggi eliminati e/o modificati da utenti selezionati",
        "sd_media": (
            "üî• <b><a href='tg://user?id={}'>{}</a> ti ha inviato un media"
            " che si autodistrugge</b>"
        ),
        "save_sd": (
            "<emoji document_id=5420315771991497307>üî•</emoji> <b>Salvo"
            " i media che si autodistruggono</b>\n"
        ),
        "cfg_save_sd": "Salva i media che si autodistruggono",
    }

    strings_de = {
        "on": "Aktiviert",
        "off": "Deaktiviert",
        "state": f"{rei} <b>Der Tracking-Modus ist jetzt {{}}.</b>",
        "spybl": (
            f"{rei} <b>Der aktuelle Chat wurde zur Spionage-Blacklist hinzugef√ºgt.</b>"
        ),
        "spybl_removed": (
            f"{rei} <b>Der aktuelle Chat wurde von der Spionage-Blacklist entfernt.</b>"
        ),
        "spybl_clear": f"{rei} <b>Die Spionage-Blacklist wurde geleert.</b>",
        "spywl": (
            f"{rei} <b>Der aktuelle Chat wurde zur Spionage-Whitelist hinzugef√ºgt.</b>"
        ),
        "spywl_removed": (
            f"{rei} <b>Der aktuelle Chat wurde von der Spionage-Whitelist entfernt.</b>"
        ),
        "spywl_clear": f"{rei} <b>Die Spionage-Whitelist wurde geleert.</b>",
        "whitelist": f"\n{rei} <b>Ich beobachte nur Nachrichten von:</b>\n{{}}",
        "always_track": f"\n{rei} <b>Ich beobachte immer Nachrichten von:</b>\n{{}}",
        "blacklist": f"\n{rei} <b>Ich ignoriere Nachrichten von:</b>\n{{}}",
        "chat": f"{groups} <b>Ich beobachte Nachrichten in Gruppen.</b>\n",
        "pm": f"{pm} <b>Ich beobachte Nachrichten in privaten Nachrichten.</b>\n",
        "deleted_pm": (
            'üóë <b><a href="{}">{}</a> hat eine private <a'
            ' href="{message_url}">Nachricht</a> gel√∂scht. Inhalt:</b>\n{}'
        ),
        "deleted_chat": (
            'üóë <b>Die <a href="{message_url}">Nachricht</a> im Chat <a href="{}">{}</a>'
            ' von <a href="{}">{}</a> wurde gel√∂scht. Inhalt:</b>\n{}'
        ),
        "edited_pm": (
            'üîè <b><a href="{}">{}</a> hat eine private <a'
            ' href="{message_url}">Nachricht</a> bearbeitet. Alte Nachricht:</b>\n{}'
        ),
        "edited_chat": (
            'üîè <b>Die <a href="{message_url}">Nachricht</a> im Chat <a href="{}">{}</a>'
            ' von <a href="{}">{}</a> wurde bearbeitet. Alte Nachricht:</b>\n{}'
        ),
        "mode_off": (
            f"{pm} <b>Ich beobachte"
            " Nachrichten nicht mehr. </b><code>{}spymode</code>\n"
        ),
        "cfg_enable_pm": "Aktivieren Sie den Spionage-Modus in privaten Nachrichten",
        "cfg_enable_groups": "Aktivieren Sie den Spionage-Modus in Gruppen",
        "cfg_whitelist": (
            "Liste der Gruppen, von denen Nachrichten gespeichert werden sollen"
        ),
        "cfg_blacklist": (
            "Liste der Gruppen, von denen Nachrichten ignoriert werden sollen"
        ),
        "cfg_always_track": (
            "Liste der Gruppen, von denen immer Nachrichten verfolgt werden sollen,"
            " egal was passiert"
        ),
        "cfg_log_edits": "Gespeicherte bearbeitete Nachrichten",
        "cfg_ignore_inline": "Ignoriere Nachrichten aus Inline-Modus",
        "cfg_fw_protect": "Schutz vor Floodw√§ssern beim Weiterleiten",
        "_cls_doc": (
            "Speichert gel√∂schte bearbeitete Nachrichten von ausgew√§hlten Benutzern"
        ),
        "sd_media": (
            "üî• <b><a href='tg://user?id={}'>{}</a> hat Ihnen ein selbstzerst√∂rendes"
            " Medium gesendet</b>"
        ),
        "save_sd": (
            "<emoji document_id=5420315771991497307>üî•</emoji> <b>Speichere"
            " selbstzerst√∂rende Medien</b>\n"
        ),
        "cfg_save_sd": "Speichern Sie selbstzerst√∂rende Medien",
    }

    strings_uz = {
        "on": "yoqildi",
        "off": "o'chirildi",
        "state": f"{rei} <b>Shu paytda spy rejimi {{}}</b>",
        "spybl": f"{rei} <b>Ushbu chat spay rejimining qora ro'yxatiga qo'shildi</b>",
        "spybl_removed": (
            f"{rei} <b>Ushbu chat spay rejimining qora ro'yxatidan olib tashlandi</b>"
        ),
        "spybl_clear": f"{rei} <b>Spay rejimining qora ro'yxati tozalandi</b>",
        "spywl": f"{rei} <b>Ushbu chat spay rejimining oq ro'yxatiga qo'shildi</b>",
        "spywl_removed": (
            f"{rei} <b>Ushbu chat spay rejimining oq ro'yxatidan olib tashlandi</b>"
        ),
        "spywl_clear": f"{rei} <b>Spay rejimining oq ro'yxati tozalandi</b>",
        "whitelist": f"\n{rei} <b>Faqat kelgan xabarlarni kuzatish</b>\n{{}}",
        "always_track": f"\n{rei} <b>Har doim kelgan xabarlarni kuzatish</b>\n{{}}",
        "blacklist": f"\n{rei} <b> kelgan xabarlarni o'chirish</b>\n{{}}",
        "chat": f"{groups} <b>Gruplardagi xabarlarimni kuzatish</b>\n",
        "pm": f"{pm} <b>Shaxsiy xabarlarimni kuzatish</b>\n",
        "deleted_pm": (
            'üóë <b><a href="{}">{}</a> shaxsiy <a href="{message_url}">xabarni</a>'
            " o'chirdi. Xabar:</b>\n{}"
        ),
        "deleted_chat": (
            'üóë <b><a href="{}">{}</a> guruhdan <a href="{}">{}</a> <a'
            ' href="{message_url}">xabarni</a> o\'chirdi. Xabar:</b>\n{}'
        ),
        "edited_pm": (
            'üîè <b><a href="{}">{}</a> shaxsiy <a href="{message_url}">xabarni</a>'
            " tahrirladi. Eski xabar:</b>\n{}"
        ),
        "edited_chat": (
            'üîè <b><a href="{}">{}</a> guruhdan <a href="{}">{}</a> <a'
            ' href="{message_url}">xabarni</a> tahrirladi. Eski xabar:</b>\n{}'
        ),
        "mode_off": (
            f"{pm} <b>Xabarlarimni kuzatishni to'xtatdim</b><code>{{}}spymode</code>\n"
        ),
        "cfg_enable_pm": "Shaxsiy xabarlarimni kuzatishni yoqish",
        "cfg_enable_groups": "Guruh xabarlarimni kuzatishni yoqish",
        "cfg_whitelist": "Xabarlarni saqlash kerak bo'lgan suhbatlar ro'yxati",
        "cfg_blacklist": "Xabarlarni o'chirish kerak bo'lgan suhbatlar ro'yxati",
        "cfg_always_track": (
            "Nima bo'lishidan qat'i nazar, har doim xabarlarni kuzatib boradigan"
            " suhbatlar ro'yxati"
        ),
        "cfg_log_edits": "Saqlangan tahrirlangan xabarlarni",
        "cfg_ignore_inline": "Inline rejimidan kelgan xabarlarni o'chirish",
        "cfg_fw_protect": "Forwarding floodlardan himoyalash",
        "_cls_doc": (
            "Tanlangan foydalanuvchilardan kelgan va/yoki o'chirilgan yoki tahrirlangan"
            " xabarlarni saqlaydi"
        ),
        "sd_media": (
            "üî• <b><a href='tg://user?id={}'>{}</a> sizga o'chiriladigan media"
            " yubordi</b>"
        ),
        "save_sd": (
            "<emoji document_id=5420315771991497307>üî•</emoji> <b>O'z-o'zini yo'q"
            " qiladigan ommaviy axborot vositalarini saqlash</b>\n"
        ),
        "cfg_save_sd": "O'chiriladigan media saqlash",
    }

    strings_tr = {
        "on": "a√ßƒ±k",
        "off": "kapalƒ±",
        "state": f"{rei} <b>≈ûu anda gizli mod {{}}</b>",
        "spybl": f"{rei} <b>Bu sohbet gizli modun siyah listesine eklendi</b>",
        "spybl_removed": (
            f"{rei} <b>Bu sohbet gizli modun siyah listesinden kaldƒ±rƒ±ldƒ±</b>"
        ),
        "spybl_clear": f"{rei} <b>Gizli modun siyah listesi temizlendi</b>",
        "spywl": f"{rei} <b>Bu sohbet gizli modun beyaz listesine eklendi</b>",
        "spywl_removed": (
            f"{rei} <b>Bu sohbet gizli modun beyaz listesinden kaldƒ±rƒ±ldƒ±</b>"
        ),
        "spywl_clear": f"{rei} <b>Gizli modun beyaz listesi temizlendi</b>",
        "whitelist": f"\n{rei} <b>Sadece belirtilen gelen mesajlarƒ± kaydet</b>\n{{}}",
        "always_track": (
            f"\n{rei} <b>Her zaman belirtilen gelen mesajlarƒ± kaydet</b>\n{{}}"
        ),
        "blacklist": f"\n{rei} <b>Belirtilen gelen mesajlarƒ± sil</b>\n{{}}",
        "chat": f"{groups} <b>Grup mesajlarƒ±mƒ± kaydet</b>\n",
        "pm": f"{pm} <b>√ñzel mesajlarƒ±mƒ± kaydet</b>\n",
        "deleted_pm": (
            'üóë <b><a href="{}">{}</a> √∂zel <a href="{message_url}">mesajƒ±</a> sildi.'
            " Mesaj:</b>\n{}"
        ),
        "deleted_chat": (
            'üóë <b><a href="{}">{}</a> guruptan <a href="{}">{}</a> <a'
            ' href="{message_url}">mesajƒ±</a> sildi. Mesaj:</b>\n{}'
        ),
        "edited_pm": (
            'üîè <b><a href="{}">{}</a> √∂zel <a href="{message_url}">mesajƒ±</a>'
            " d√ºzenledi. Eski mesaj:</b>\n{}"
        ),
        "edited_chat": (
            'üîè <b><a href="{}">{}</a> guruptan <a href="{}">{}</a> <a'
            ' href="{message_url}">mesajƒ±</a> d√ºzenledi. Eski mesaj:</b>\n{}'
        ),
        "mode_off": (
            f"{pm} <b>Mesajlarƒ±mƒ± kaydetmeyi kapattƒ±m</b><code>{{}}spymode</code>\n"
        ),
        "cfg_enable_pm": "√ñzel mesajlarƒ±mƒ± kaydetmeyi a√ß",
        "cfg_enable_groups": "Grup mesajlarƒ±mƒ± kaydetmeyi a√ß",
        "cfg_whitelist": "Kaydedilmesi gereken sohbetler listesi",
        "cfg_blacklist": "Silinmesi gereken sohbetler listesi",
        "cfg_always_track": (
            "Ne olursa olsun, iletileri her zaman izlenecek sohbetler listesi"
        ),
        "cfg_log_edits": "Kaydedilen d√ºzenlenmi≈ü mesajlarƒ±",
        "cfg_ignore_inline": "Inline modundan gelen mesajlarƒ± sil",
        "cfg_fw_protect": "Forwarding floodlarƒ±ndan korun",
        "_cls_doc": (
            "Belirtilen kullanƒ±cƒ±larƒ±n/sohbetlerin silinmi≈ü, d√ºzenlenmi≈ü veya"
            " kaydedilen mesajlarƒ±nƒ± kaydeder"
        ),
        "sd_media": (
            "üî• <b><a href='tg://user?id={}'>{}</a> sana silinebilir medya g√∂nderdi</b>"
        ),
        "save_sd": (
            "<emoji document_id=5420315771991497307>üî•</emoji> <b>Kendi kendini imha"
            " eden medyayƒ± kaydetme</b>\n"
        ),
        "cfg_save_sd": "Silinebilir medyayƒ± kaydet",
    }

    strings_es = {
        "on": "activado",
        "off": "desactivado",
        "state": f"{rei} <b>El modo esp√≠a est√° actualmente {{}}</b>",
        "spybl": (
            f"{rei} <b>Este chat ha sido a√±adido a la lista negra del modo esp√≠a</b>"
        ),
        "spybl_removed": (
            f"{rei} <b>Este chat ha sido eliminado de la lista negra del modo esp√≠a</b>"
        ),
        "spybl_clear": f"{rei} <b>La lista negra del modo esp√≠a ha sido limpiada</b>",
        "spywl": (
            f"{rei} <b>Este chat ha sido a√±adido a la lista blanca del modo esp√≠a</b>"
        ),
        "spywl_removed": (
            f"{rei} <b>Este chat ha sido"
            " eliminado de la lista blanca del modo esp√≠a</b>"
        ),
        "spywl_clear": f"{rei} <b>La lista blanca del modo esp√≠a ha sido limpiada</b>",
        "whitelist": (
            f"\n{rei} <b>Guardar solo los mensajes de los especificados</b>\n{{}}"
        ),
        "always_track": (
            f"\n{rei} <b>Guardar siempre los mensajes de los especificados</b>\n{{}}"
        ),
        "blacklist": f"\n{rei} <b>Borrar los mensajes de los especificados</b>\n{{}}",
        "chat": (
            "<emoji document_id=603735566736530096   0>üë•</emoji> <b>Guardar mis"
            " mensajes de grupo</b>\n"
        ),
        "pm": f"{pm} <b>Guardar mis mensajes privados</b>\n",
        "deleted_pm": (
            'üóë <b><a href="{}">{}</a> elimin√≥ un <a href="{message_url}">mensaje</a>'
            " privado. Mensaje:</b>\n{}"
        ),
        "deleted_chat": (
            'üóë <b><a href="{}">{}</a> elimin√≥ un <a href="{message_url}">mensaje</a> de'
            ' <a href="{}">{}</a> en el grupo. Mensaje:</b>\n{}'
        ),
        "edited_pm": (
            'üîè <b><a href="{}">{}</a> edit√≥ un <a href="{message_url}">mensaje</a>'
            " privado. Mensaje anterior:</b>\n{}"
        ),
        "edited_chat": (
            'üîè <b><a href="{}">{}</a> edit√≥ un <a href="{message_url}">mensaje</a> de'
            ' <a href="{}">{}</a> en el grupo. Mensaje anterior:</b>\n{}'
        ),
        "mode_off": (
            f"{pm} <b>He desactivado el modo esp√≠a</b><code>{{}}spymode</code>\n"
        ),
        "cfg_enable_pm": "Guardar mensajes privados",
        "cfg_enable_groups": "Guardar mensajes de grupo",
        "cfg_whitelist": "Lista de Chats a guardar",
        "cfg_blacklist": "Lista de –°hats a borrar",
        "cfg_always_track": (
            "Lista de Chats para rastrear siempre los mensajes, pase lo que pase"
        ),
        "cfg_log_edits": "Guardar mensajes editados",
        "cfg_ignore_inline": "Ignorar mensajes de inline",
        "cfg_fw_protect": "Protegerse de forwarding floods",
        "_cls_doc": (
            "Guarda los mensajes borrados, editados o enviados por un usuario"
            " especificado"
        ),
        "sd_media": (
            "üî• <b><a href='tg://user?id={}'>{}</a> te ha enviado un mensaje de"
            " contenido que se puede borrar</b>"
        ),
        "save_sd": (
            "<emoji document_id=5420315771991497307>üî•</emoji> <b>Guardar medios"
            " autodestructivos</b>\n"
        ),
        "cfg_save_sd": "Guardar contenido que se puede borrar",
    }

    strings_kk = {
        "on": "“õ–æ—Å—ã–ª“ì–∞–Ω",
        "off": "”©—à—ñ—Ä—ñ–ª–≥–µ–Ω",
        "state": f"{rei} <b>–®–ø–∏–æ–Ω —Ä–µ–∂–∏–º—ñ –∞“ì—ã–º–¥–∞ {{}}</b>",
        "spybl": (
            f"{rei} <b>–ë“±–ª —Å”©–π–ª–µ—Å—É “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã —à–ø–∏–æ–Ω —Ä–µ–∂–∏–º—ñ–Ω—ñ“£ “õ–∞—Ä–∞ —Ç—ñ–∑—ñ–º—ñ–Ω–µ “õ–æ—Å—ã–ª–¥—ã</b>"
        ),
        "spybl_removed": (
            f"{rei} <b>–ë“±–ª —Å”©–π–ª–µ—Å—É “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã —à–ø–∏–æ–Ω —Ä–µ–∂–∏–º—ñ–Ω—ñ“£ “õ–∞—Ä–∞ —Ç—ñ–∑—ñ–º—ñ–Ω–µ–Ω –∞–ª—ã–Ω–¥—ã</b>"
        ),
        "spybl_clear": f"{rei} <b>–®–ø–∏–æ–Ω —Ä–µ–∂–∏–º—ñ–Ω—ñ“£ “õ–∞—Ä–∞ —Ç—ñ–∑—ñ–º—ñ–Ω —Ç–∞–∑–∞–ª–∞—É</b>",
        "spywl": (
            f"{rei} <b>–ë“±–ª —Å”©–π–ª–µ—Å—É “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã —à–ø–∏–æ–Ω —Ä–µ–∂–∏–º—ñ–Ω—ñ“£ –∞“õ —Ç—ñ–∑—ñ–º—ñ–Ω–µ “õ–æ—Å—ã–ª–¥—ã</b>"
        ),
        "spywl_removed": (
            f"{rei} <b>–ë“±–ª —Å”©–π–ª–µ—Å—É “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã —à–ø–∏–æ–Ω —Ä–µ–∂–∏–º—ñ–Ω—ñ“£ –∞“õ —Ç—ñ–∑—ñ–º—ñ–Ω–µ–Ω –∞–ª—ã–Ω–¥—ã</b>"
        ),
        "spywl_clear": f"{rei} <b>–®–ø–∏–æ–Ω —Ä–µ–∂–∏–º—ñ–Ω—ñ“£ –∞“õ —Ç—ñ–∑—ñ–º—ñ–Ω —Ç–∞–∑–∞–ª–∞—É</b>",
        "whitelist": f"\n{rei} <b>–¢–µ–∫ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã “õ–∞–¥–∞“ì–∞–ª–∞—É:</b>\n{{}}",
        "always_track": f"\n{rei} <b>”ò—Ä“õ–∞—à–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã “õ–∞–¥–∞“ì–∞–ª–∞—É:</b>\n{{}}",
        "blacklist": f"\n{rei} <b>–•–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã –µ–ª–µ–º–µ—É:</b>\n{{}}",
        "chat": f"{groups} <b>–ì—Ä—É–ø–ø–∞–¥–∞“ì—ã –∂–∞–∑–±–∞–ª–∞—Ä—ã–º–¥—ã —Å–∞“õ—Ç–∞—É</b>\n",
        "pm": f"{pm} <b>–ñ–µ–∫–µ –∂–∞–∑–±–∞–ª–∞—Ä—ã–º–¥—ã —Å–∞“õ—Ç–∞—É</b>\n",
        "deleted_pm": (
            'üóë <b><a href="{}">{}</a> –∂–µ–∫–µ <a href="{message_url}">–∂–∞–∑–±–∞“ì—ã–Ω</a> –∂–æ–π–¥—ã.'
            " –ñ–∞–∑–±–∞:</b>\n{}"
        ),
        "deleted_chat": (
            'üóë <b><a href="{}">{}</a> <a href="{}">{}</a> —Ç–æ–ø—ã–Ω–¥–∞“ì—ã'
            ' <a href="{message_url}">–∂–∞–∑–±–∞“ì—ã–Ω</a> –∂–æ–π–¥—ã. –ñ–∞–∑–±–∞:</b>\n{}'
        ),
        "edited_pm": (
            'üîè <b><a href="{}">{}</a> –∂–µ–∫–µ <a href="{message_url}">–∂–∞–∑–±–∞“ì—ã–Ω</a>'
            " ”©–∑–≥–µ—Ä—Ç—Ç—ñ. –ê–ª–¥—ã–Ω–¥–∞“ì—ã –∂–∞–∑–±–∞:</b>\n{}"
        ),
        "edited_chat": (
            'üîè <b><a href="{}">{}</a> <a href="{}">{}</a> —Ç–æ–ø—ã–Ω–¥–∞“ì—ã <a'
            ' href="{message_url}">–∂–∞–∑–±–∞“ì—ã–Ω</a> ”©–∑–≥–µ—Ä—Ç—Ç—ñ. –ê–ª–¥—ã–Ω–¥–∞“ì—ã –∂–∞–∑–±–∞:</b>\n{}'
        ),
        "mode_off": f"{pm} <b>–°–ø–∞–π —Ä–µ–∂–∏–º—ñ–Ω ”©—à—ñ—Ä–¥—ñ–º</b><code>{{}}spymode</code>\n",
        "cfg_enable_pm": "–ñ–µ–∫–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã —Å–∞“õ—Ç–∞—É",
        "cfg_enable_groups": "–¢–æ–ø—Ç–∞—Ä–¥—ã“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã–Ω —Å–∞“õ—Ç–∞—É",
        "cfg_whitelist": "–°–∞“õ—Ç–∞–ª–∞—Ç—ã–Ω —Ç–æ–ø—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ",
        "cfg_blacklist": "–ñ–æ—é“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ—Ç—ñ–Ω —Ç–æ–ø—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ",
        "cfg_always_track": (
            "–ï—à –Ω”ô—Ä—Å–µ–≥–µ “õ–∞—Ä–∞–º–∞—Å—Ç–∞–Ω, ”ô—Ä“õ–∞—à–∞–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã –±–∞“õ—ã–ª–∞–π—Ç—ã–Ω —Ç–æ–ø—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ"
        ),
        "cfg_log_edits": "”®“£–¥–µ–ª–≥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã —Å–∞“õ—Ç–∞—É",
        "cfg_ignore_inline": "Inline —Ä–µ–∂–∏–º—ñ–Ω–µ–Ω –∫–µ–ª–≥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã –∂–æ—é",
        "cfg_fw_protect": "Forwarding flood-—Ç–µ–Ω “õ–æ—Ä“ì–∞—É",
        "_cls_doc": (
            "–ö”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã/—Ç–æ–ø—Ç–∞—Ä–¥—ã“£ –∂–æ–π—ã–ª“ì–∞–Ω, ”©“£–¥–µ–ª–≥–µ–Ω –Ω–µ–º–µ—Å–µ —Å–∞“õ—Ç–∞–ª“ì–∞–Ω"
            " —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã–Ω —Å–∞“õ—Ç–∞–π–¥—ã"
        ),
        "sd_media": (
            "üî• <b><a href='tg://user?id={}'>{}</a> —Å–µ–Ω—ñ“£ –∂–æ–π—ã–ª“ì–∞–Ω –º–µ–¥–∏–∞-–∂–∞–∑–±–∞“£—ã“£"
            " –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω</b>"
        ),
        "save_sd": (
            "<emoji document_id=5420315771991497307>üî•</emoji> <b>–ñ–æ–π—ã–ª“ì–∞–Ω"
            " –º–µ–¥–∏–∞-–∂–∞–∑–±–∞–ª–∞—Ä–¥—ã —Å–∞“õ—Ç–∞—É</b>\n"
        ),
        "cfg_save_sd": "–ñ–æ–π—ã–ª“ì–∞–Ω –º–µ–¥–∏–∞-–∂–∞–∑–±–∞–ª–∞—Ä–¥—ã —Å–∞“õ—Ç–∞—É",
    }

    def __init__(self):
        self._tl_channel = None
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "enable_pm",
                True,
                lambda: self.strings("cfg_enable_pm"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "enable_groups",
                False,
                lambda: self.strings("cfg_enable_groups"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "whitelist",
                [],
                lambda: self.strings("cfg_whitelist"),
                validator=loader.validators.Series(),
            ),
            loader.ConfigValue(
                "blacklist",
                [],
                lambda: self.strings("cfg_blacklist"),
                validator=loader.validators.Series(),
            ),
            loader.ConfigValue(
                "always_track",
                [],
                lambda: self.strings("cfg_always_track"),
                validator=loader.validators.Series(),
            ),
            loader.ConfigValue(
                "log_edits",
                True,
                lambda: self.strings("cfg_log_edits"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "ignore_inline",
                True,
                lambda: self.strings("cfg_ignore_inline"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "fw_protect",
                3.0,
                lambda: self.strings("cfg_fw_protect"),
                validator=loader.validators.Float(minimum=0.0),
            ),
            loader.ConfigValue(
                "save_sd",
                True,
                lambda: self.strings("cfg_save_sd"),
                validator=loader.validators.Boolean(),
            ),
        )

        self._queue = []
        self._cache = {}
        self._next = 0
        self._threshold = 10
        self._flood_protect_sample = 60

    @loader.loop(interval=0.1, autostart=True)
    async def sender(self):
        if not self._queue or self._next > time.time():
            return

        item = self._queue.pop(0)
        await item
        self._next = int(time.time()) + self.config["fw_protect"]

    @staticmethod
    def _int(value: typing.Union[str, int], /) -> typing.Union[str, int]:
        return int(value) if str(value).isdigit() else value

    @property
    def blacklist(self):
        return list(
            map(
                self._int,
                self.config["blacklist"]
                + [777000, self._client.tg_id, self._tl_channel, self.inline.bot_id],
            )
        )

    @blacklist.setter
    def blacklist(self, value: list):
        self.config["blacklist"] = list(
            set(value)
            - {777000, self._client.tg_id, self._tl_channel, self.inline.bot_id}
        )

    @property
    def whitelist(self):
        return list(map(self._int, self.config["whitelist"]))

    @whitelist.setter
    def whitelist(self, value: list):
        self.config["whitelist"] = value

    @property
    def always_track(self):
        return list(map(self._int, self.config["always_track"]))

    async def client_ready(self):
        channel, _ = await utils.asset_channel(
            self._client,
            "spy",
            "Deleted and edited messages will appear there",
            silent=True,
            invite_bot=True,
            avatar="https://pm1.narvii.com/6733/0e0380ca5cd7595de53f48c0ce541d3e2f2effc4v2_hq.jpg",
            _folder="AuthorBot",
        )

        self._channel = int(f"-100{channel.id}")
        self._tl_channel = channel.id

    @loader.command(
        ru_doc=(
            "‚Ä¢ –ö—Ç–æ —è? ‚Ä¢ –ê—è–Ω–∞–º–∏ –†–µ–π. ‚Ä¢ –ê –∫—Ç–æ —Ç—ã? ‚Ä¢ –ê—è–Ω–∞–º–∏ –†–µ–π. ‚Ä¢ –¢—ã —Ç–æ–∂–µ –ê—è–Ω–∞–º–∏ –†–µ–π? ‚Ä¢"
            " –î–∞. –Ø —Ç–∞, –∫–æ–≥–æ –∑–Ω–∞—é—Ç –∫–∞–∫ –ê—è–Ω–∞–º–∏ –†–µ–π. ‚Ä¢ –ú—ã –≤—Å–µ —Ç–µ, –∫–æ–≥–æ –∑–Ω–∞—é—Ç, –∫–∞–∫ –ê—è–Ω–∞–º–∏"
            " –†–µ–π. ‚Ä¢ –ö–∞–∫ –æ–Ω–∏ –≤—Å–µ –º–æ–≥—É—Ç –±—ã—Ç—å –º–Ω–æ–π? ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –¥—Ä—É–≥–∏–µ –∑–æ–≤—É—Ç –Ω–∞—Å"
            " –ê—è–Ω–∞–º–∏ –†–µ–π. –¢–æ–ª—å–∫–æ –∏ –≤—Å—ë. –£ —Ç–µ–±—è –Ω–µ–Ω–∞—Å—Ç–æ—è—â–∞—è –¥—É—à–∞, –∏ —Ç–µ–ª–æ —Ç–≤–æ—ë -"
            " –ø–æ–¥–¥–µ–ª–∫–∞. –ó–Ω–∞–µ—à—å –ø–æ—á–µ–º—É? ‚Ä¢ –Ø –Ω–µ –ø–æ–¥–¥–µ–ª–∫–∞ –∏ –Ω–µ —Ñ–∞–ª—å—à–∏–≤–∫–∞. –Ø - —ç—Ç–æ —è."
        ),
        tr_doc=(
            "‚Ä¢ Kimim? ‚Ä¢ Ayanami Rei. ‚Ä¢ Kimsin? ‚Ä¢ Ayanami Rei. ‚Ä¢ Sen de Ayanami Rei"
            " misin? ‚Ä¢ Evet. Beni bilenler Ayanami Rei olarak bilir. ‚Ä¢ Hepimiz Ayanami"
            " Rei olarak bilinenleriz. ‚Ä¢ Hepimiz nasƒ±l Ayanami Rei olabiliriz? ‚Ä¢ Sadece"
            " diƒüerleri bizi Ayanami Rei olarak adlandƒ±rƒ±yor. Sadece bu. Ruhun ger√ßek"
            " deƒüil ve v√ºcudun bir kopya. Biliyor musun neden? ‚Ä¢ Ben bir kopya deƒüilim"
            " ve sahte deƒüilim. Ben benim."
        ),
        it_doc=(
            "‚Ä¢ Chi sono io? ‚Ä¢ Ayanami Rei. ‚Ä¢ Chi sei tu? ‚Ä¢ Ayanami Rei. ‚Ä¢ Tu sei anche"
            " Ayanami Rei? ‚Ä¢ S√¨. Io sono quella che conoscono come Ayanami Rei. ‚Ä¢ Tutti"
            " noi siamo quelli che conoscono come Ayanami Rei. ‚Ä¢ Come possono tutti"
            " essere io? ‚Ä¢ Solo perch√© gli altri ci chiamano Ayanami Rei. Solo questo."
            " La tua anima non √® vera e il tuo corpo √® una copia. Lo sai perch√©? ‚Ä¢ Non"
            " sono una copia e non sono una falsa. Io sono io."
        ),
        kk_doc=(
            "‚Ä¢ –ú–µ–Ω—ñ –∫—ñ–º? ‚Ä¢ –ê—è–Ω–∞–º–∏ –†–µ–π. ‚Ä¢ –°–µ–Ω—ñ –∫—ñ–º? ‚Ä¢ –ê—è–Ω–∞–º–∏ –†–µ–π. ‚Ä¢ –°–µ–Ω—ñ –¥–µ –ê—è–Ω–∞–º–∏ –†–µ–π?"
            " ‚Ä¢ –ò”ô. –ú–µ–Ω –ê—è–Ω–∞–º–∏ –†–µ–π –¥–µ–ø –±—ñ–ª—ñ–Ω–µ—Ç—ñ–Ω –∫—ñ–º. ‚Ä¢ –ë–∞—Ä–ª—ã“ì—ã–º—ã–∑ –ê—è–Ω–∞–º–∏ –†–µ–π –¥–µ–ø"
            " –±—ñ–ª—ñ–Ω–µ—Ç—ñ–Ω –∫—ñ–º. ‚Ä¢ –ë–∞—Ä–ª–∞—Ä –º–µ–Ω—ñ “õ–∞–π—Å—ã –±–æ–ª–∞ –∞–ª–∞–¥—ã? ‚Ä¢ “ö–∞—Ç–∞—Ä—ã–Ω–∞–Ω, –±—ñ–∑–¥–µ—Ä–¥—ñ"
            " –ê—è–Ω–∞–º–∏ –†–µ–π –¥–µ–ø –∞—Ç–∞–π—Ç—ã–Ω. –ë—ñ—Ä–∞“õ, –±“±–ª –±–∞—Ä–ª—ã“õ. –°–µ–Ω—ñ“£ –¥—É–∞–ª—ã“£ –∂–∞—Ä–∞–º—Å—ã–∑, –∂”ô–Ω–µ"
            " —Ç–µ–ª–µ–≥—ñ“£ - –±“±–ª “õ–∞—Ç–µ. –ë—ñ–ª–µ—Å—ñ–Ω –±–µ? ‚Ä¢ –ú–µ–Ω –∂–∞—Ä–∞–º—Å—ã–∑ –∂”ô–Ω–µ “õ–∞—Ç–µ –µ–º–µ—Å–ø—ñ–Ω. –ú–µ–Ω -"
            " –±“±–ª –º–µ–Ω."
        ),
        de_doc=(
            "‚Ä¢ Wer bin ich? ‚Ä¢ Ayanami Rei. ‚Ä¢ Und wer bist du? ‚Ä¢ Ayanami Rei. ‚Ä¢ Bist du"
            " auch Ayanami Rei? ‚Ä¢ Ja. Ich bin die, die als Ayanami Rei bekannt ist. ‚Ä¢"
            " Wir sind alle diejenigen, die als Ayanami Rei bekannt sind. ‚Ä¢ Wie k√∂nnen"
            " alle mich sein? ‚Ä¢ Einfach nur, weil andere uns als Ayanami Rei nennen."
            " Das ist alles. Du hast eine falsche Seele und deinen K√∂rper gibt es"
            " nicht. Wei√üt du, warum? ‚Ä¢ Ich bin nicht falsch und nicht falsch. Ich bin"
            " ich."
        ),
        es_doc=(
            "‚Ä¢ ¬øQui√©n soy? ‚Ä¢ Ayanami Rei. ‚Ä¢ ¬øY qui√©n eres? ‚Ä¢ Ayanami Rei. ‚Ä¢ ¬øT√∫ tambi√©n"
            " eres Ayanami Rei? ‚Ä¢ S√≠. Soy la que se conoce como Ayanami Rei. ‚Ä¢ Todos"
            " somos lo que se conoce como Ayanami Rei. ‚Ä¢ ¬øC√≥mo pueden todos ser yo? ‚Ä¢"
            " Simplemente porque otros nos llaman Ayanami Rei. Eso es todo. Tienes un"
            " alma falsa y tu cuerpo es una falsificaci√≥n. ¬øSabes por qu√©? ‚Ä¢ No soy"
            " falso ni falso. Soy yo."
        ),
    )
    async def spymode(self, message: Message):
        """‚Ä¢ Who am I? ‚Ä¢ Ayanami Rey. ‚Ä¢ Who are you? ‚Ä¢ Ayanami Rey. ‚Ä¢ Are you Ayanami Rey too? ‚Ä¢ Yes. I'm the one known as Ayanami Rey. ‚Ä¢ We're all what we know as Ayanami Rey. ‚Ä¢ How can they all be me? ‚Ä¢ Just because others call us Ayanami Rey. That's all. You have a fake soul and your body is a fake. You know why? ‚Ä¢ I'm not fake or fake. I am me.
        """
        await utils.answer(
            message,
            self.strings("state").format(
                self.strings("off" if self.get("state", False) else "on")
            ),
        )
        self.set("state", not self.get("state", False))

    @loader.command(
        ru_doc="–î–æ–±–∞–≤–∏—Ç—å / —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∞",
        de_doc="Chat zur Ignorierliste hinzuf√ºgen / entfernen",
        uz_doc="Chatni qo'shish / olib tashlash",
        tr_doc="Sohbeti engelleme listesine ekle / kaldƒ±r",
        es_doc="Agregar / eliminar chat de la lista de ignorados",
        kk_doc="–ß–∞—Ç—Ç—ã “õ–æ—Å—É / –∂–æ—é",
        it_doc="Aggiungi / rimuovi chat dalla lista di ignorati",
    )
    async def spybl(self, message: Message):
        """Add / remove chat from blacklist"""
        chat = utils.get_chat_id(message)
        if chat in self.blacklist:
            self.blacklist = list(set(self.blacklist) - {chat})
            await utils.answer(message, self.strings("spybl_removed"))
        else:
            self.blacklist = list(set(self.blacklist) | {chat})
            await utils.answer(message, self.strings("spybl"))

    @loader.command(
        ru_doc="–û—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
        de_doc="Schwarze Liste leeren",
        uz_doc="Qora ro'yxatni tozalash",
        tr_doc="Siyah listeyi temizle",
        es_doc="Limpiar lista negra",
        kk_doc="“ö–∞—Ä–∞ —Ç—ñ–∑—ñ–º–¥—ñ —Ç–∞–∑–∞–ª–∞—É",
        it_doc="Cancella la lista nera",
    )
    async def spyblclear(self, message: Message):
        """Clear blacklist"""
        self.blacklist = []
        await utils.answer(message, self.strings("spybl_clear"))

    @loader.command(
        ru_doc="–î–æ–±–∞–≤–∏—Ç—å / —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞",
        de_doc="Chat zur Whitelist hinzuf√ºgen / entfernen",
        uz_doc="Chatni o'qish ro'yxatiga qo'shish / olib tashlash",
        tr_doc="Sohbeti beyaz listeye ekle / kaldƒ±r",
        es_doc="Agregar / eliminar chat de la lista blanca",
        kk_doc="–ß–∞—Ç—Ç—ã –æ“õ—ã—à —Ç—ñ–∑—ñ–º—ñ–Ω–µ “õ–æ—Å—É / –∂–æ—é",
        it_doc="Aggiungi / rimuovi chat dalla whitelist",
    )
    async def spywl(self, message: Message):
        """Add / remove chat from whitelist"""
        chat = utils.get_chat_id(message)
        if chat in self.whitelist:
            self.whitelist = list(set(self.whitelist) - {chat})
            await utils.answer(message, self.strings("spywl_removed"))
        else:
            self.whitelist = list(set(self.whitelist) | {chat})
            await utils.answer(message, self.strings("spywl"))

    @loader.command(
        ru_doc="–û—á–∏—Å—Ç–∏—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫",
        de_doc="Whitelist leeren",
        uz_doc="O'qish ro'yxatini tozalash",
        tr_doc="Beyaz listeyi temizle",
        es_doc="Limpiar lista blanca",
        kk_doc="–û“õ—ã—à —Ç—ñ–∑—ñ–º—ñ–Ω —Ç–∞–∑–∞–ª–∞—É",
        it_doc="Cancella la whitelist",
    )
    async def spywlclear(self, message: Message):
        """Clear whitelist"""
        self.whitelist = []
        await utils.answer(message, self.strings("spywl_clear"))

    async def _get_entities_list(self, entities: list) -> str:
        return "\n".join(
            [
                "\u0020\u2800\u0020\u2800<emoji"
                ' document_id=4971987363145188045>‚ñ´Ô∏è</emoji> <b><a href="{}">{}</a></b>'
                .format(
                    utils.get_entity_url(await self._client.get_entity(x, exp=0)),
                    utils.escape_html(
                        get_display_name(await self._client.get_entity(x, exp=0))
                    ),
                )
                for x in entities
            ]
        )

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ø–∞–π-–º–æ–¥–∞",
        de_doc="Aktuelle Spy-Modus-Konfiguration anzeigen",
        uz_doc="Spy rejimining hozirgi konfiguratsiyasini ko'rsatish",
        tr_doc="Spy modu ge√ßerli yapƒ±landƒ±rmasƒ±nƒ± g√∂ster",
        es_doc="Mostrar la configuraci√≥n actual del modo esp√≠a",
        kk_doc="–°–ø–∞–π-—Ä–µ–∂–∏–º–¥—ñ“£ –∞“ì—ã–º–¥–∞“ì—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Å—ã–Ω –∫”©—Ä—Å–µ—Ç—É",
        it_doc="Mostra la configurazione attuale della modalit√† spia",
    )
    async def spyinfo(self, message: Message):
        """Show current spy mode configuration"""
        if not self.get("state"):
            await utils.answer(
                message, self.strings("mode_off").format(self.get_prefix())
            )
            return

        info = ""

        if self.config["save_sd"]:
            info += self.strings("save_sd")

        if self.config["enable_groups"]:
            info += self.strings("chat")

        if self.config["enable_pm"]:
            info += self.strings("pm")

        if self.whitelist:
            info += self.strings("whitelist").format(
                await self._get_entities_list(self.whitelist)
            )

        if self.config["blacklist"]:
            info += self.strings("blacklist").format(
                await self._get_entities_list(self.config["blacklist"])
            )

        if self.always_track:
            info += self.strings("always_track").format(
                await self._get_entities_list(self.always_track)
            )

        await utils.answer(message, info)

    async def _message_deleted(self, msg_obj: Message, caption: str):
        caption = self.inline.sanitise_text(caption)

        if not msg_obj.photo and not msg_obj.video and not msg_obj.document:
            self._queue += [
                self.inline.bot.send_message(
                    self._channel,
                    caption,
                    disable_web_page_preview=True,
                )
            ]
            return

        if msg_obj.sticker:
            self._queue += [
                self.inline.bot.send_message(
                    self._channel,
                    caption + "\n\n&lt;sticker&gt;",
                    disable_web_page_preview=True,
                )
            ]
            return

        file = io.BytesIO(await self._client.download_media(msg_obj, bytes))
        args = (self._channel, file)
        kwargs = {"caption": caption}
        if msg_obj.photo:
            file.name = "photo.jpg"
            self._queue += [self.inline.bot.send_photo(*args, **kwargs)]
        elif msg_obj.video:
            file.name = "video.mp4"
            self._queue += [self.inline.bot.send_video(*args, **kwargs)]
        elif msg_obj.voice:
            file.name = "audio.ogg"
            self._queue += [self.inline.bot.send_voice(*args, **kwargs)]
        elif msg_obj.document:
            file.name = next(
                attr.file_name
                for attr in msg_obj.document.attributes
                if isinstance(attr, DocumentAttributeFilename)
            )
            self._queue += [self.inline.bot.send_document(*args, **kwargs)]

    async def _message_edited(self, caption: str, msg_obj: Message):
        args = (
            self._channel,
            await self._client.download_media(msg_obj, bytes),
        )
        kwargs = {"caption": self.inline.sanitise_text(caption)}
        if msg_obj.photo:
            self._queue += [self.inline.bot.send_photo(*args, **kwargs)]
        elif msg_obj.video:
            self._queue += [self.inline.bot.send_video(*args, **kwargs)]
        elif msg_obj.voice:
            self._queue += [self.inline.bot.send_voice(*args, **kwargs)]
        elif msg_obj.document:
            self._queue += [self.inline.bot.send_document(*args, **kwargs)]
        else:
            self._queue += [
                self.inline.bot.send_message(
                    self._channel,
                    self.inline.sanitise_text(caption),
                    disable_web_page_preview=True,
                )
            ]

    @loader.raw_handler(UpdateEditChannelMessage)
    async def channel_edit_handler(self, update: UpdateEditChannelMessage):
        if (
            not self.get("state", False)
            or update.message.out
            or (self.config["ignore_inline"] and update.message.via_bot_id)
        ):
            return

        key = f"{utils.get_chat_id(update.message)}/{update.message.id}"
        if key in self._cache and (
            utils.get_chat_id(update.message) in self.always_track
            or self._cache[key].sender_id in self.always_track
            or (
                self.config["log_edits"]
                and self.config["enable_groups"]
                and utils.get_chat_id(update.message) not in self.blacklist
                and (
                    not self.whitelist
                    or utils.get_chat_id(update.message) in self.whitelist
                )
            )
        ):
            msg_obj = self._cache[key]
            if not msg_obj.sender.bot and update.message.raw_text != msg_obj.raw_text:
                await self._message_edited(
                    self.strings("edited_chat").format(
                        utils.get_entity_url(msg_obj.chat),
                        utils.escape_html(get_display_name(msg_obj.chat)),
                        utils.get_entity_url(msg_obj.sender),
                        utils.escape_html(get_display_name(msg_obj.sender)),
                        msg_obj.text,
                        message_url=await utils.get_message_link(msg_obj),
                    ),
                    msg_obj,
                )

        self._cache[key] = update.message

    def _should_capture(self, user_id: int, chat_id: int) -> bool:
        return (
            chat_id not in self.blacklist
            and user_id not in self.blacklist
            and (
                not self.whitelist
                or chat_id in self.whitelist
                or user_id in self.whitelist
            )
        )

    @loader.raw_handler(UpdateEditMessage)
    async def pm_edit_handler(self, update: UpdateEditMessage):
        if (
            not self.get("state", False)
            or update.message.out
            or (self.config["ignore_inline"] and update.message.via_bot_id)
        ):
            return

        key = update.message.id
        msg_obj = self._cache.get(key)
        if (
            key in self._cache
            and (
                self._cache[key].sender_id in self.always_track
                or (utils.get_chat_id(self._cache[key]) in self.always_track)
                or (
                    self.config["log_edits"]
                    and self._should_capture(
                        self._cache[key].sender_id,
                        utils.get_chat_id(self._cache[key]),
                    )
                )
                and (
                    (
                        self.config["enable_pm"]
                        and not isinstance(msg_obj.peer_id, PeerChat)
                        or self.config["enable_groups"]
                        and isinstance(msg_obj.peer_id, PeerChat)
                    )
                )
            )
            and update.message.raw_text != msg_obj.raw_text
        ):
            sender = await self._client.get_entity(msg_obj.sender_id, exp=0)
            if not sender.bot:
                chat = (
                    await self._client.get_entity(
                        msg_obj.peer_id.chat_id,
                        exp=0,
                    )
                    if isinstance(msg_obj.peer_id, PeerChat)
                    else None
                )
                await self._message_edited(
                    self.strings("edited_chat").format(
                        utils.get_entity_url(chat),
                        utils.escape_html(get_display_name(chat)),
                        utils.get_entity_url(sender),
                        utils.escape_html(get_display_name(sender)),
                        msg_obj.text,
                        message_url=await utils.get_message_link(msg_obj),
                    )
                    if isinstance(msg_obj.peer_id, PeerChat)
                    else self.strings("edited_pm").format(
                        utils.get_entity_url(sender),
                        utils.escape_html(get_display_name(sender)),
                        msg_obj.text,
                        message_url=await utils.get_message_link(msg_obj),
                    ),
                    msg_obj,
                )

        self._cache[update.message.id] = update.message

    @loader.raw_handler(UpdateDeleteMessages)
    async def pm_delete_handler(self, update: UpdateDeleteMessages):
        if not self.get("state", False):
            return

        for message in update.messages:
            if message not in self._cache:
                continue

            msg_obj = self._cache.pop(message)

            if (
                msg_obj.sender_id not in self.always_track
                and utils.get_chat_id(msg_obj) not in self.always_track
                and (
                    not self._should_capture(
                        msg_obj.sender_id, utils.get_chat_id(msg_obj)
                    )
                    or (self.config["ignore_inline"] and msg_obj.via_bot_id)
                    or (
                        not self.config["enable_groups"]
                        and isinstance(msg_obj.peer_id, PeerChat)
                    )
                    or (
                        not self.config["enable_pm"]
                        and not isinstance(msg_obj.peer_id, PeerChat)
                    )
                )
            ):
                continue

            sender = await self._client.get_entity(msg_obj.sender_id, exp=0)

            if sender.bot:
                continue

            chat = (
                await self._client.get_entity(msg_obj.peer_id.chat_id, exp=0)
                if isinstance(msg_obj.peer_id, PeerChat)
                else None
            )

            await self._message_deleted(
                msg_obj,
                self.strings("deleted_chat").format(
                    utils.get_entity_url(chat),
                    utils.escape_html(get_display_name(chat)),
                    utils.get_entity_url(sender),
                    utils.escape_html(get_display_name(sender)),
                    msg_obj.text,
                    message_url=await utils.get_message_link(msg_obj),
                )
                if isinstance(msg_obj.peer_id, PeerChat)
                else self.strings("deleted_pm").format(
                    utils.get_entity_url(sender),
                    utils.escape_html(get_display_name(sender)),
                    msg_obj.text,
                    message_url=await utils.get_message_link(msg_obj),
                ),
            )

    @loader.raw_handler(UpdateDeleteChannelMessages)
    async def channel_delete_handler(self, update: UpdateDeleteChannelMessages):
        if not self.get("state", False):
            return

        for message in update.messages:
            key = f"{update.channel_id}/{message}"
            if key not in self._cache:
                continue

            msg_obj = self._cache.pop(key)

            if (
                msg_obj.sender_id in self.always_track
                or utils.get_chat_id(msg_obj) in self.always_track
                or self.config["enable_groups"]
                and (
                    self._should_capture(
                        msg_obj.sender_id,
                        utils.get_chat_id(msg_obj),
                    )
                    and (not self.config["ignore_inline"] or not msg_obj.via_bot_id)
                    and not msg_obj.sender.bot
                )
            ):
                await self._message_deleted(
                    msg_obj,
                    self.strings("deleted_chat").format(
                        utils.get_entity_url(msg_obj.chat),
                        utils.escape_html(get_display_name(msg_obj.chat)),
                        utils.get_entity_url(msg_obj.sender),
                        utils.escape_html(get_display_name(msg_obj.sender)),
                        msg_obj.text,
                        message_url=await utils.get_message_link(msg_obj),
                    ),
                )

    @loader.watcher("in")
    async def watcher(self, message: Message):
        if (
            self.config["save_sd"]
            and getattr(message, "media", False)
            and getattr(message.media, "ttl_seconds", False)
        ):
            media = io.BytesIO(await self.client.download_media(message.media, bytes))
            media.name = "sd.jpg" if message.photo else "sd.mp4"
            sender = await self.client.get_entity(message.sender_id, exp=0)
            await (
                self.inline.bot.send_photo
                if message.photo
                else self.inline.bot.send_video
            )(
                self._channel,
                media,
                caption=self.strings("sd_media").format(
                    utils.get_entity_url(sender),
                    utils.escape_html(get_display_name(sender)),
                ),
            )

        with contextlib.suppress(AttributeError):
            self._cache[
                message.id
                if message.is_private or isinstance(message.peer_id, PeerChat)
                else f"{utils.get_chat_id(message)}/{message.id}"
            ] = message