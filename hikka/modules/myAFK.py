__version__ = (2, 0, 2)                                                                        
#                         ¬© Copyright 2023                             
#                                                                        
#                https://t.me/Den4ikSuperOstryyPer4ik                    
#                              and                                       
#                      https://t.me/ToXicUse                             
#                                                                         
#                 üîí Licensed under the GNU AGPLv3                       
#             https://www.gnu.org/licenses/agpl-3.0.html                 

import time
import logging
import datetime
from telethon import types
from .. import loader, utils
from ..inline.types import InlineCall
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import UpdateProfileRequest

logger = logging.getLogger(__name__)


class MyAfkMod(loader.Module):
	"""Custom AFK module by AstroModules"""

	async def client_ready(self, client, db):
		self._db = db
		self._me = await client.get_me()
		self._db.set(__name__, 'change_bio', True)
		self._db.set(__name__, "change_name", True)

	strings = {
		"name": "myAFK",

		"lname": "| afk.",

		"bt_off_afk": "üö´ <b>–ê–§–ö</b> —Ä–µ–∂–∏–º <b> –≤–∏–º–∫–Ω–µ–Ω–æ</b>!",

		"_cfg_cst_btn": "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç, —è–∫–µ –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏–º–µ –ø—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º –ê–§–ö. –©–æ–± –∑–æ–≤—Å—ñ–º –ø—Ä–∏–±—Ä–∞—Ç–∏, –Ω–∞–ø–∏—à—ñ—Ç—å None",
		"feedback_bot__text": "–Æ–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–æ–≥–æ feedback –±–æ—Ç–∞. –Ø–∫—â–æ –Ω–µ–º–∞—î - –Ω–µ —á—ñ–ø–∞–π—Ç–µ",
		"button__text": "–î–æ–¥–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ê–§–ö —Ä–µ–∂–∏–º—É?",
		"custom_text__afk_text": "–ö–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç –∞—Ñ–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π {time} –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —á–∞—Å—É –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è —É –º–µ—Ä–µ–∂—ñ",
	}

	def render_settings(self):
		active = self._db.get(__name__, 'afk')
		if active == True:
			a_active = "–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ"
		else:
			a_active = '–í–∏–º–∫–Ω–µ–Ω–æ üö´'
		change_bio = self._db.get(__name__, 'change_bio')
		if change_bio == True:
			a_change_bio = '–¢–∞–∫'
		else:
			a_change_bio = '–ù—ñ'
		change_name = self._db.get(__name__, 'change_name')
		if change_name == True:
			a_change_name = '–¢–∞–∫'
		else:
			a_change_name = '–ù—ñ'
		fb = self.config['feedback']
		text = (
			f'üéÜ <b>myAfk</b>\n'
			f'‚îú<b>{a_active}</b>\n'
			f'<b>‚îú–ó–º—ñ–Ω–∞ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—ó:</b> <code>{a_change_bio}</code> üìñ\n'
			f'<b>‚îú–ó–∞–º—ñ–Ω–∞ –ü—Ä–µ—Ñ—ñ–∫—Å–∞:</b> <code>{a_change_name}</code> üìù\n'
			f'<b>‚îî–ë–æ—Ç –¥–ª—è –∑–≤`—è–∑–∫—É:</b> <code>@{fb}</code> ü§ñ'
		)
		return text


	def __init__(self):
		self.config = loader.ModuleConfig(
			loader.ConfigValue(
				"prefix",
				'| afk.',
				doc=lambda: '–ü—Ä–µ—Ñ—ñ–∫—Å, —è–∫–∏–π –¥–æ–¥–∞–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –¥–æ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É –¥–æ –ê–§–ö'
			),
			loader.ConfigValue(
				"feedback",
				None,
				doc=lambda: self.strings("feedback_bot__text"),
			),
			loader.ConfigValue(
				'about_text',
				None,
				doc=lambda: '–¢–µ–∫—Å—Ç, —è–∫–∏–π –≤–∏—Å—Ç–∞–≤–ª—è—Ç–∏–º–µ—Ç—å—Å—è –≤ –±—ñ–æ –ø—Ä–∏ –≤—Ö–æ–¥—ñ –¥–æ –ê–§–ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ {bot} –¥–ª—è –≤–∫–∞–∑—ñ–≤–∫–∏ –≤–∞—à–æ–≥–æ feedback –±–æ—Ç–∞ –¥–ª—è –∑–≤`—è–∑–∫—É'
			),
			loader.ConfigValue(
				"afk_text",
				"None",
				doc=lambda: self.strings("custom_text__afk_text"),
			),
			loader.ConfigValue(
				"link_button",
				[
					"AuthorChe`s‚úçÔ∏è",
					"https://t.me/AuthorChe",
				],
				lambda: self.strings("_cfg_cst_btn"),
				validator=loader.validators.Union(
					loader.validators.Series(fixed_len=2),
					loader.validators.NoneType()
				),
			),
			loader.ConfigValue(
				"ignore_chats",
				[],
				lambda: "–ß–∞—Ç–∏, —É —è–∫–∏—Ö myAfk –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏–º–µ",
				validator=loader.validators.Series(
                    validator=loader.validators.Union(
                        loader.validators.TelegramID(),
                        loader.validators.RegExp("[0-9]"),
                    ),
                ),
			),
			loader.ConfigValue(
				"button",
				True,
				doc=lambda: self.strings("button__text"),
				validator=loader.validators.Boolean(),
			)

		)

	def _afk_custom_text(self) -> str:
		now = datetime.datetime.now().replace(microsecond=0)
		gone = datetime.datetime.fromtimestamp(
			self._db.get(__name__, "gone")
		).replace(microsecond=0)

		time = now - gone

		return (
			"<b> </b>\n"
			+ self.config["afk_text"].format(
				time=time,
			)
		)

	def _afk_about_text(self) -> str:
		bot = self.config['feedback']

		return (
			""
			+ self.config['about_text'].format(
				bot=bot
			)
		)

	@loader.command()
	async def afkconfig(self, message):
		"""- –≤—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è"""
		
		await self.inline.form(message=message, text='<b>‚öôÔ∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>', reply_markup=[{'text': 'üî¥ –í—ñ–¥–∫—Ä–∏—Ç–∏', 'callback': self.settings}])

	@loader.command()
	async def afk(self, message):
		"""- —É–≤—ñ–π—Ç–∏ –¥–æ –ê–§–ö —Ä–µ–∂–∏–º—É"""
		try:
			user_id = (
				(
					(
						await self._client.get_entity(
							args if not args.isdigit() else int(args)
						)
					).id
				)
				if args
				else reply.sender_id
			)
		except Exception:
			user_id = self._tg_id
		user = await self._client(GetFullUserRequest(user_id))
		
		self._db.set(__name__, "afk", True)
		self._db.set(__name__, "gone", time.time())
		self._db.set(__name__, "ratelimit", [])
		change_bio = self._db.get(__name__, "change_bio")
		change_name = self._db.get(__name__, "change_name")
		
		about = user.full_user.about

		self._db.set(__name__, 'about', about)

		if change_name == False and change_bio == False:
			await utils.answer(message, '<emoji document_id=5188391205909569136>‚úÖ</emoji> <b>–ê–§–ö</b> —Ä–µ–∂–∏–º –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ <b>–£–≤—ñ–º–∫–Ω–µ–Ω–æ</b>!')
			return

		if change_name == True:
			prefix = self.config['prefix']
			await message.client(UpdateProfileRequest(last_name=prefix))

		if change_bio == True:
			cfg_bio = self.config['about_text']
			if cfg_bio == None:
				await message.client(UpdateProfileRequest(about="–ó–Ω–∞—Ö–æ–¥–∂—É—Å—å –≤ –∞—Ñ–∫."))
			else:
				bio = self._afk_about_text()
				await message.client(UpdateProfileRequest(about=bio))

		await utils.answer(message, '<emoji document_id=5188391205909569136>‚úÖ</emoji> <b>–ê–§–ö</b> —Ä–µ–∂–∏–º —É—Å–ø—ñ—à–Ω–æ <b>–£–≤—ñ–º–∫–Ω–µ–Ω–æ</b>!')
		

	@loader.command()
	async def unafk(self, message):
		"""- –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ê–§–ö"""

		self._db.set(__name__, "afk", False)
		self._db.set(__name__, "gone", None)
		self._db.set(__name__, "ratelimit", [])
		change_bio = self._db.get(__name__, "change_bio")
		change_name = self._db.get(__name__, "change_name")

		if change_name == False and change_bio == False:
			await utils.answer(message, '<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–ê–§–ö</b> —Ä–µ–∂–∏–º —É—Å–ø—ñ—à–Ω–æ <b>–í–∏–º–∫–Ω–µ–Ω–æ</b>!')
			return

		if change_name == True:
			await message.client(UpdateProfileRequest(last_name=' '))

		if change_bio == True:
			try:
				await message.client(UpdateProfileRequest(about=f'{self.db.get(__name__, "about")}'))
			except:
				await message.client(UpdateProfileRequest(about="@AuthorChe - poems from the heart ‚ù§Ô∏è"))
		await utils.answer(message, '<emoji document_id=5465665476971471368>‚ùå</emoji> <b>–ê–§–ö</b> —Ä–µ–∂–∏–º —É—Å–ø—ñ—à–Ω–æ <b>–í–∏–º–∫–Ω—É—Ç–æ</b>!')
		await self.allmodules.log("MyAfk now stoped.")


	@loader.watcher()
	async def watcher(self, message):
		if not isinstance(message, types.Message):
			return
		if utils.get_chat_id(message) in self.config['ignore_chats']: 
			return
		if message.mentioned or getattr(message.to_id, "user_id", None) == self._me.id:
			afk_state = self.get_afk()
			if not afk_state:
				return
			logger.debug("tagged!")
			ratelimit = self._db.get(__name__, "ratelimit", [])
			if utils.get_chat_id(message) in ratelimit:
				return
			else:
				self._db.setdefault(__name__, {}).setdefault("ratelimit", []).append(
					utils.get_chat_id(message)
				)
				self._db.save()
			user = await utils.get_user(message)
			if user.is_self or user.bot or user.verified:
				logger.debug("User is self, bot or verified.")
				return
			if self.get_afk() is False:
				return
			now = datetime.datetime.now().replace(microsecond=0)
			gone = datetime.datetime.fromtimestamp(
				self._db.get(__name__, "gone")
			).replace(microsecond=0)
			time = now - gone
			if self.config['link_button'] == None:
				if self.config["button"] == False:
					if self.config["afk_text"] == None:
						await self.inline.form(message=message, text=f"<b>üîÖ –Ø –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–±—É–≤–∞—é –≤ offline (–Ω–µ –≤ –º–µ—Ä–µ–∂—ñ).\n–í—ñ–¥–ø–æ–≤—ñ–º –ø—ñ–∑–Ω—ñ—à–µ</b>\n\n–í–æ—Å—Ç–∞–Ω–Ω—î –±—É–≤ —É –º–µ—Ä–µ–∂—ñ <code>{time}</code> —Ç–æ–º—É.\n\n<i>–ü–æ–∫–∏ —á–µ–∫–∞—î—Ç–µ, —Ä–∞–¥–∂—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—É —Ç–≤–æ—Ä—ñ–≤ –≤:</i>", silent=True)
					else:
						await self.inline.form(message=message, text=self._afk_custom_text(), silent=True)
				
				elif self.config['button'] == True:
					if self.config["afk_text"] == None:
						await self.inline.form(
							message=message, 
							text=f"<b>üîÖ –Ø –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–±—É–≤–∞—é –≤ offline (–Ω–µ –≤ –º–µ—Ä–µ–∂—ñ).\n–í—ñ–¥–ø–æ–≤—ñ–º –ø—ñ–∑–Ω—ñ—à–µ</b>\n\n–í–æ—Å—Ç–∞–Ω–Ω—î –±—É–≤ —É –º–µ—Ä–µ–∂—ñ <code>{time}</code> —Ç–æ–º—É.\n\n<i>–ü–æ–∫–∏ —á–µ–∫–∞—î—Ç–µ, —Ä–∞–¥–∂—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—É —Ç–≤–æ—Ä—ñ–≤ –≤:</i>", 
							reply_markup=[
								[
									{
										"text": "ü•± –í–∏–π—Ç–∏ –∑ –ê–§–ö", 
										"callback": self.button_cancel,
									}
								]
							],
							silent=True
						)

					else:
						await self.inline.form(
							message=message, 
							text=self._afk_custom_text(), 
							reply_markup=[
								[
									{
										"text": "ü•± –í–∏–π—Ç–∏ –∑ –ê–§–ö", 
										"callback": self.button_cancel,
									}
								]
							],
							silent=True
						)
			else:
				if self.config["button"] == False:
					if self.config["afk_text"] == None:
						await self.inline.form(
							message=message, 
							text=f"<b>üîÖ –Ø –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–±—É–≤–∞—é –≤ offline (–Ω–µ –≤ –º–µ—Ä–µ–∂—ñ).\n–í—ñ–¥–ø–æ–≤—ñ–º –ø—ñ–∑–Ω—ñ—à–µ</b>\n\n–í–æ—Å—Ç–∞–Ω–Ω—î –±—É–≤ —É –º–µ—Ä–µ–∂—ñ <code>{time}</code> —Ç–æ–º—É.\n\n<i>–ü–æ–∫–∏ —á–µ–∫–∞—î—Ç–µ, —Ä–∞–¥–∂—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—É —Ç–≤–æ—Ä—ñ–≤ –≤:</i>", 
							reply_markup=[
								{
									"text": self.config['link_button'][0], 
									"url": self.config['link_button'][1]
								}
							],
							silent=True
						)
					else:
						await self.inline.form(
							message=message, 
							text=self._afk_custom_text(), 
							reply_markup=[
								{
									"text": self.config['link_button'][0], 
									"url": self.config['link_button'][1]
								}
							],
							silent=True
						)
				
				elif self.config['button'] == True:
					if self.config["afk_text"] == None:
						await self.inline.form(
							message=message, 
							text=f"<b>üîÖ –Ø –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–±—É–≤–∞—é –≤ offline (–Ω–µ –≤ –º–µ—Ä–µ–∂—ñ).\n–í—ñ–¥–ø–æ–≤—ñ–º –ø—ñ–∑–Ω—ñ—à–µ</b>\n\n–í–æ—Å—Ç–∞–Ω–Ω—î –±—É–≤ —É –º–µ—Ä–µ–∂—ñ <code>{time}</code> —Ç–æ–º—É.\n\n<i>–ü–æ–∫–∏ —á–µ–∫–∞—î—Ç–µ, —Ä–∞–¥–∂—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—É —Ç–≤–æ—Ä—ñ–≤ –≤:</i>", 
							reply_markup=[
								[
									{
										"text": self.config['link_button'][0],
										"url": self.config['link_button'][1],
									}
								],
								[
									{
										"text": "ü•± –í–∏–π—Ç–∏ –∑ –ê–§–ö", 
										"callback": self.button_cancel,
									}
								]
							],
							silent=True
						)

					else:
						await self.inline.form(
							message=message, 
							text=self._afk_custom_text(), 
							reply_markup=[
								[
									{
										"text": self.config['link_button'][0],
										"url": self.config['link_button'][1],
									}
								],
								[
									{
										"text": "ü•± –í–∏–π—Ç–∏ –∑ –ê–§–ö", 
										"callback": self.button_cancel,
									}
								]
							],
							silent=True
						)

	async def button_cancel(self, call: InlineCall):
		self._db.set(__name__, "afk", False)
		self._db.set(__name__, "gone", None)
		self._db.set(__name__, "ratelimit", [])
		change_bio = self._db.get(__name__, "change_bio")
		change_name = self._db.get(__name__, "change_name")
		await self.allmodules.log("myAF–ö now not working.")

		if change_name == False and change_bio == False:
			await call.edit(self.strings["bt_off_afk"])
			return

		if change_name == True:
			await self._client(UpdateProfileRequest(last_name=' '))

		if change_bio == True:
			try:
				await self._client(UpdateProfileRequest(about=self.db.get(__name__, "about")))
			except:
				await self._.client(UpdateProfileRequest(about="@AuthorChe - poems from the heart ‚ù§Ô∏è"))

		await call.edit(self.strings["bt_off_afk"])

	async def settings(self, call: InlineCall):
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)

	async def settings_name(self, call: InlineCall):
		await call.edit(
			text=(
				f'<b>üìñ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ü—Ä–µ—Ñ—ñ–∫—Å–∞</b>\n\n'
				+ '<i>‚ùî –ß–∏ —Ö–æ—á–µ—Ç–µ –í–∏, —â–æ–± –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –ê–§–ö —Ä–µ–∂–∏–º –¥–æ –≤–∞—à–æ–≥–æ '
				+ '–Ω—ñ–∫—É –¥–æ–¥–∞–≤–∞–≤—Å—è –ü—Ä–µ—Ñ—ñ–∫—Å <code>| afk.</code> ?</i>\n\n'
				+ '‚ÑπÔ∏è –¢–∞–∫–æ–∂ –í–∏ –º–æ–∂–µ—Ç–µ <b>–∑–º—ñ–Ω–∏—Ç–∏ –ü—Ä–µ—Ñ—ñ–∫—Å</b>, '
				+ '<b>—Å–∫–∞—Å—É–≤–∞—Ç–∏</b> –∞–±–æ <b>–∑–¥—ñ–π—Å–Ω–∏—Ç–∏</b> –¥—ñ—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ <b>–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ</b>'
			),
			reply_markup=[
				[
					{
						'text': '‚úÖ –¢–∞–∫',
						"callback": self.name_yes
					},
					{
						"text": 'üö´ –ù—ñ',
						"callback": self.name_no
					}
				],
				[{'text': '‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'callback': self.settings}]
			]
		)
	async def name_yes(self, call: InlineCall):
		self._db.set(__name__, 'change_name', True)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)
	async def name_no(self, call: InlineCall):
		self._db.set(__name__, 'change_name', False)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)
	async def settings_about(self, call: InlineCall):
		if self.config['feedback'] == None:
			text = (
				f'üìñ <b>–ó–º—ñ–Ω–∞ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—ó</b>'
+ '\n\n‚ùî <b>–•–æ—á–µ—Ç–µ</b> –ß–∏ –í–∏, —â–æ–± –ø—Ä–∏ <b>–≤—Ö–æ–¥—ñ –≤ –ê–§–ö</b> —Ä–µ–∂–∏–º –í–∞—à–∞ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—è <b>–∑–º—ñ–Ω—é–≤–∞–ª–∞—Å—è</b>'
				+ '  –Ω–∞ "<code>–ó–Ω–∞—Ö–æ–¥–∂—É—Å—è –≤ –∞—Ñ–∫</code>"?\n\n'
+ '‚ÑπÔ∏è –¢–∞–∫ —Å–∞–º–æ –í–∏ –º–æ–∂–µ—Ç–µ <b>–∑–º—ñ–Ω–∏—Ç–∏ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—é</b> —É <b>–∫–æ–Ω—Ñ—ñ–∑—ñ</b>. '
				+ '–ú–æ–∂–Ω–∞ <b>—Å–∫–∞—Å—É–≤–∞—Ç–∏</b> –∞–±–æ <b>–∑–¥—ñ–π—Å–Ω–∏—Ç–∏</b> –¥—ñ—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ <b>–∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ</b>'
			)
		else:
			text = (
				f'üìñ <b>–ó–º—ñ–Ω–∞ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—ó</b>'
+ '\n\n‚ùî <b>–ß–∏ –±–∞–∂–∞—î—Ç–µ</b> –í–∏, —â–æ–± –ø—Ä–∏ <b>–≤—Ö–æ–¥—ñ –≤ –ê–§–ö</b> —Ä–µ–∂–∏–º '
				+ '–í–∞—à–∞ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—è <b>–∑–º—ñ–Ω—é–≤–∞–ª–∞—Å—è</b> –Ω–∞ "<code>–ù–µ–º–∞—î, –Ω–∞ –º—ñ—Å—Ü—ñ –∑–Ω–∞—Ö–æ–¥–∂—É—Å—è –≤ –∞—Ñ–∫</code><code>.'
				+ f' –ó–≤`—è–∑–æ–∫ —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ @{self.config["feedback_bot"]}</code>"?\nü§ñ <b>–ë–æ—Ç –¥–ª—è –∑–≤`—è–∑–∫—É</b>: <code>@{self.config["feedback_bot"]}</code>\n\n'
				+ '‚ÑπÔ∏è –¢–∞–∫–æ–∂ –í–∏ –º–æ–∂–µ—Ç–µ <b>–∑–º—ñ–Ω–∏—Ç–∏ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—é</b> –≤ <b>–∫–æ–Ω—Ñ—ñ–∑—ñ</b>. '
				+ '–ú–æ–∂–Ω–∞ <b>—Å–∫–∞—Å—É–≤–∞—Ç–∏</b> –∞–±–æ <b>–∑–¥—ñ–π—Å–Ω–∏—Ç–∏</b> –¥—ñ—é, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ <b>–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ</b>'
			)
		await call.edit(
			text=text,
			reply_markup=[
				[
					{
						'text': '‚úÖ –¢–∞–∫',
						"callback": self.bio
					},
					{
						"text": 'üö´ –ù—ñ',
						"callback": self.bio_n
					}
				],
				[{'text': '‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'callback': self.settings}]
			]
		)
	async def bio(self, call: InlineCall):
		self._db.set(__name__, 'change_bio', True)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)
	async def bio_n(self, call: InlineCall):
		self._db.set(__name__, 'change_bio', False)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': "üìñ –ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è",
						'callback': self.settings_about
					},
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)

	def get_afk(self):
		return self._db.get(__name__, "afk", False)
