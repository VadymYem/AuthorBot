# ¬© Dan G. && AuthorChe
#  
# You can redistribute it and/or modify it under the terms of the GNU AGPLv3
#  https://www.gnu.org/licenses/agpl-3.0.html
# -*- coding: utf-8 -*-

import hikkatl
from hikkatl.extensions.html import CUSTOM_EMOJIS
from hikkatl.tl.types import Message

from .. import loader, main, utils, version
from ..inline.types import InlineCall
import random


@loader.tds
class CoreMod(loader.Module):
    """Control core userbot settings"""

    strings = {"name": "Settings",
               "acbt": '''
    ‚úåÔ∏è <b>–ü—Ä–∏–≤—ñ—Ç!</b>
    
    <b>–Æ–∑–µ—Ä–±–æ—Ç</b> ‚Äî —Ü–µ –±–æ—Ç, —è–∫–∏–π –ø—Ä–∞—Ü—é—î –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram, –Ω–∞–¥–∞—é—á–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –∫–ª–∞—Å–∏—á–Ω–∏—Ö –±–æ—Ç—ñ–≤. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —é–∑–µ—Ä–±–æ—Ç –º–æ–∂–µ —á–∏—Ç–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —ó—Ö –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è, —à—É–∫–∞—Ç–∏ —ñ–Ω—Ñ–æ –≤ –≥—É–≥–ª —Ç–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –¥—ñ—ó, —è–∫ —ñ –∑–≤–∏—á–∞–π–Ω–∏–π –±–æ—Ç, –∞–ª–µ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    
    <b>AuthorBot</b> ‚Äî —Ü–µ –æ–¥–∏–Ω —ñ–∑ –Ω–∞–π—Å—É—á–∞—Å–Ω—ñ—à–∏—Ö —é–∑–µ—Ä–±–æ—Ç—ñ–≤, —è–∫–∏–π –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤–∏—Å–æ–∫–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏. –û—Å—å –π–æ–≥–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:
    
    - üÜï <b>–û—Å—Ç–∞–Ω–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram</b>: –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä–µ–∞–∫—Ü—ñ–π, –≤—ñ–¥–µ–æ-–Ω–∞–∫–ª–µ–π–æ–∫, —Ü–∏—Ç–∞—Ç —Ç–∞ —ñ–Ω—à–∏—Ö –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
    - üîì <b>–ü–æ–ª—ñ–ø—à–µ–Ω–∞ –±–µ–∑–ø–µ–∫–∞</b>: –≤–±—É–¥–æ–≤–∞–Ω–µ –∫–µ—à—É–≤–∞–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π —Ç–∞ —Ü—ñ–ª—å–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏.
    - üé® <b>–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å</b>: –∑—Ä—É—á–Ω–∏–π –¥–∏–∑–∞–π–Ω —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–∑–∞—î–º–æ–¥—ñ—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
    - üìº <b>–ù–æ–≤—ñ –º–æ–¥—É–ª—ñ</b>: –æ–Ω–æ–≤–ª–µ–Ω—ñ —Ç–∞ –¥–æ–¥–∞–Ω—ñ –Ω–æ–≤—ñ –æ—Å–Ω–æ–≤–Ω—ñ –º–æ–¥—É–ª—ñ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É.
    - ‚è± <b>–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å</b>: —à–≤–∏–¥–∫–∞ —Ä–æ–±–æ—Ç–∞ —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏.
    - ‚ñ∂Ô∏è <b>–í–±—É–¥–æ–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∏, –≥–∞–ª–µ—Ä–µ—ó —Ç–∞ —Å–ø–∏—Å–∫–∏</b>: –∑—Ä—É—á–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.
    - üë®‚Äçüë¶ <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ NoNick</b>: –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –∞–∫–∞—É–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ —é–∑–µ—Ä–±–æ—Ç–∞.
    - üîÅ <b>–ü–æ–≤–Ω–∞ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å</b>: –ø—Ä–∞—Ü—é—î –∑ –ø–æ–ø—É–ª—è—Ä–Ω–∏–º–∏ —é–∑–µ—Ä–±–æ—Ç–∞–º–∏ –Ω–∞ –±–∞–∑—ñ Telethon.
    - üá∫üá¶ <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏</b>: —É–Ω—ñ–∫–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î AuthorBot –≤—ñ–¥ —ñ–Ω—à–∏—Ö.
    - <b>–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ</b>: —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –∞–≤—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É.
    
    AuthorBot ‚Äî —Ü–µ —ñ–¥–µ–∞–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —à—É–∫–∞—î —Å—É—á–∞—Å–Ω–∏–π, –±–µ–∑–ø–µ—á–Ω–∏–π —Ç–∞ –∑—Ä—É—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –≤ Telegram.
    
    <b>üåç </b><a href="https://authorche.pp.ua/">WebSite</a>
    <b>üë• </b><a href="http://www.instagram.com/Vadym_Yem">Instagramüòé</a>
    '''}

    async def blacklistcommon(self, message: Message):
        args = utils.get_args(message)

        if len(args) > 2:
            await utils.answer(message, self.strings("too_many_args"))
            return

        chatid = None
        module = None

        if args:
            try:
                chatid = int(args[0])
            except ValueError:
                module = args[0]

        if len(args) == 2:
            module = args[1]

        if chatid is None:
            chatid = utils.get_chat_id(message)

        module = self.allmodules.get_classname(module)
        return f"{str(chatid)}.{module}" if module else chatid

    @loader.command()
    async def authorcmd(self, message: Message):
    await utils.answer(
        message,
        self.strings("acbt").format(
            (
                utils.get_platform_emoji()
                if self._client.hikka_me.premium and CUSTOM_EMOJIS
                else "‚ù§Ô∏è<b>AuthorBot userbot</b>"
            ),
            *version.__version__,
            utils.get_commit_url(),
            f"{hikkatl.__version__} #{hikkatl.tl.alltlobjects.LAYER}",
        )
        + (
            (
                "\n\n<emoji document_id=5287454910059654880>üíª</emoji> <b>@wsinfo</b>"
            )
            if random.choice([0, 1]) == 1
            else ""
        ),
    )
    @loader.command()
    async def blacklist(self, message: Message):
        chatid = await self.blacklistcommon(message)

        self._db.set(
            main.__name__,
            "blacklist_chats",
            self._db.get(main.__name__, "blacklist_chats", []) + [chatid],
        )

        await utils.answer(message, self.strings("blacklisted").format(chatid))

    @loader.command()
    async def unblacklist(self, message: Message):
        chatid = await self.blacklistcommon(message)

        self._db.set(
            main.__name__,
            "blacklist_chats",
            list(set(self._db.get(main.__name__, "blacklist_chats", [])) - {chatid}),
        )

        await utils.answer(message, self.strings("unblacklisted").format(chatid))

    async def getuser(self, message: Message):
        try:
            return int(utils.get_args(message)[0])
        except (ValueError, IndexError):
            if reply := await message.get_reply_message():
                return reply.sender_id

            return message.to_id.user_id if message.is_private else False

    @loader.command()
    async def blacklistuser(self, message: Message):
        if not (user := await self.getuser(message)):
            await utils.answer(message, self.strings("who_to_blacklist"))
            return

        self._db.set(
            main.__name__,
            "blacklist_users",
            self._db.get(main.__name__, "blacklist_users", []) + [user],
        )

        await utils.answer(message, self.strings("user_blacklisted").format(user))

    @loader.command()
    async def unblacklistuser(self, message: Message):
        if not (user := await self.getuser(message)):
            await utils.answer(message, self.strings("who_to_unblacklist"))
            return

        self._db.set(
            main.__name__,
            "blacklist_users",
            list(set(self._db.get(main.__name__, "blacklist_users", [])) - {user}),
        )

        await utils.answer(
            message,
            self.strings("user_unblacklisted").format(user),
        )

    @loader.command()
    async def setprefix(self, message: Message):
        if not (args := utils.get_args_raw(message)):
            await utils.answer(message, self.strings("what_prefix"))
            return

        if len(args) != 1:
            await utils.answer(message, self.strings("prefix_incorrect"))
            return

        if args == "s":
            await utils.answer(message, self.strings("prefix_incorrect"))
            return

        oldprefix = utils.escape_html(self.get_prefix())

        self._db.set(
            main.__name__,
            "command_prefix",
            args,
        )
        await utils.answer(
            message,
            self.strings("prefix_set").format(
                "<emoji document_id=5197474765387864959>√∞≈∏‚Äò¬ç</emoji>",
                newprefix=utils.escape_html(args[0]),
                oldprefix=utils.escape_html(oldprefix),
            ),
        )

    @loader.command()
    async def aliases(self, message: Message):
        await utils.answer(
            message,
            self.strings("aliases")
            + "\n".join(
                [
                    f"<emoji document_id=4974259868996207180>√∞≈∏‚Ä∫‚Äò</emoji> <code>{i}</code> &lt;- {y}"
                    for i, y in self.allmodules.aliases.items()
                ]
            ),
        )

    @loader.command()
    async def addalias(self, message: Message):
        if len(args := utils.get_args(message)) != 2:
            await utils.answer(message, self.strings("alias_args"))
            return

        alias, cmd = args
        if self.allmodules.add_alias(alias, cmd):
            self.set(
                "aliases",
                {
                    **self.get("aliases", {}),
                    alias: cmd,
                },
            )
            await utils.answer(
                message,
                self.strings("alias_created").format(utils.escape_html(alias)),
            )
        else:
            await utils.answer(
                message,
                self.strings("no_command").format(utils.escape_html(cmd)),
            )

    @loader.command()
    async def delalias(self, message: Message):
        args = utils.get_args(message)

        if len(args) != 1:
            await utils.answer(message, self.strings("delalias_args"))
            return

        alias = args[0]

        if not self.allmodules.remove_alias(alias):
            await utils.answer(
                message,
                self.strings("no_alias").format(utils.escape_html(alias)),
            )
            return

        current = self.get("aliases", {})
        del current[alias]
        self.set("aliases", current)
        await utils.answer(
            message,
            self.strings("alias_removed").format(utils.escape_html(alias)),
        )

    @loader.command()
    async def cleardb(self, message: Message):
        await self.inline.form(
            self.strings("confirm_cleardb"),
            message,
            reply_markup=[
                {
                    "text": self.strings("cleardb_confirm"),
                    "callback": self._inline__cleardb,
                },
                {
                    "text": self.strings("cancel"),
                    "action": "close",
                },
            ],
        )

    async def _inline__cleardb(self, call: InlineCall):
        self._db.clear()
        self._db.save()
        await utils.answer(call, self.strings("db_cleared"))

    async def installationcmd(self, message: Message):
        """| Guide of installation"""

        await self.client.send_file(
            message.peer_id,
            "https://github.com/VadymYem/AuthorBot/blob/421a04d850ac990525f1987646609d86622fd990/assets/acbot_pfp.png",
            caption=self.strings["installation"].format('{}', prefix=self.get_prefix()), reply_to=getattr(message, "reply_to_msg_id", None),)
    
        await message.delete()
